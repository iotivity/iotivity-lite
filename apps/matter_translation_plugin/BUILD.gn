import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")

import("${chip_root}/build/chip/tools.gni")
import("${chip_root}/examples/chip-tool/chip-tool.gni")
import("${chip_root}/src/lib/core/core.gni")

if (config_use_interactive_mode) {
  import("//build_overrides/editline.gni")
}

assert(chip_build_tools)

chip_tool_root = "./"

config("config") {
  include_dirs = [
    ".",
    "${chip_root}/examples/common",
    "${chip_root}/zzz_generated/app-common/app-common",
    "${chip_root}/zzz_generated/chip-tool",
    "${chip_root}/src/lib"
  ]

  defines = [
    "CONFIG_USE_LOCAL_STORAGE=${config_use_local_storage}",
    "CONFIG_USE_SEPARATE_EVENTLOOP=${config_use_separate_eventloop}",
    "CONFIG_USE_INTERACTIVE_MODE=${config_use_interactive_mode}",
    "CONFIG_ENABLE_YAML_TESTS=${config_enable_yaml_tests}"
  ]

  cflags = [ "-Wconversion" ]
}


config("iotivity_library") {
  include_dirs = [
    "/usr/local/include/iotivity-lite",
    "/usr/local/include/tinycbor",
    "/usr/local/include",
    "${bridge_manager_root}"
  ]

  lib_dirs = [
    "/usr/local/lib"
  ]

  libs = [
    "iotivity-lite-client-server",
    "pthread",
    "jansson"
  ]

  defines = [
    "OC_DYNAMIC_ALLOCATION",
    "OC_INTROSPECTION",
    "OC_SECURITY",
    "OC_PKI",
    "OC_SERVER",
    "OC_CLIENT",
    "OC_BRIDGE",
    # "OC_BRG_DEBUG",
    "OC_BRG"
  ]
}

static_library("chip-tool-utils") {
  sources = [
    "${chip_root}/src/app/tests/suites/include/ConstraintsChecker.h",
    "${chip_root}/src/app/tests/suites/include/ValueChecker.h",
    "${chip_root}/src/controller/ExamplePersistentStorage.cpp",
    "${chip_root}/src/controller/ExamplePersistentStorage.h",
    "${chip_root}/zzz_generated/chip-tool/zap-generated/cluster/ComplexArgumentParser.cpp",
    "${chip_root}/zzz_generated/chip-tool/zap-generated/cluster/logging/DataModelLogger.cpp",
    "${chip_tool_root}/commands/clusters/ModelCommand.cpp",
    "${chip_tool_root}/commands/clusters/ModelCommand.h",
    "${chip_tool_root}/commands/common/CHIPCommand.cpp",
    "${chip_tool_root}/commands/common/CHIPCommand.h",
    "${chip_tool_root}/commands/common/Command.cpp",
    "${chip_tool_root}/commands/common/Command.h",
    "${chip_tool_root}/commands/common/Commands.cpp",
    "${chip_tool_root}/commands/common/Commands.h",
    "${chip_tool_root}/commands/common/CredentialIssuerCommands.h",
    "${chip_tool_root}/commands/common/DeviceScanner.cpp",
    "${chip_tool_root}/commands/common/HexConversion.h",
    "${chip_tool_root}/commands/common/RemoteDataModelLogger.cpp",
    "${chip_tool_root}/commands/common/RemoteDataModelLogger.h",
    "${chip_tool_root}/commands/delay/SleepCommand.cpp",
    "${chip_tool_root}/commands/delay/WaitForCommissioneeCommand.cpp",
    "${chip_tool_root}/commands/discover/DiscoverCommand.cpp",
    "${chip_tool_root}/commands/discover/DiscoverCommissionablesCommand.cpp",
    "${chip_tool_root}/commands/discover/DiscoverCommissionersCommand.cpp",
    "${chip_tool_root}/commands/pairing/CloseSessionCommand.cpp",
    "${chip_tool_root}/commands/pairing/CloseSessionCommand.h",
    "${chip_tool_root}/commands/pairing/OpenCommissioningWindowCommand.cpp",
    "${chip_tool_root}/commands/pairing/OpenCommissioningWindowCommand.h",
    "${chip_tool_root}/commands/pairing/PairingCommand.cpp",
    "${chip_tool_root}/commands/pairing/ToTLVCert.cpp",
    "${chip_tool_root}/commands/payload/AdditionalDataParseCommand.cpp",
    "${chip_tool_root}/commands/payload/SetupPayloadGenerateCommand.cpp",
    "${chip_tool_root}/commands/payload/SetupPayloadParseCommand.cpp",
    "${chip_tool_root}/commands/payload/SetupPayloadVerhoeff.cpp",
    "${chip_tool_root}/commands/storage/StorageManagementCommand.cpp",
  ]

  deps = []

  if (config_use_interactive_mode) {
    sources += [ "${chip_tool_root}/commands/interactive/InteractiveCommands.cpp" ]
    deps += [
      "${chip_root}/examples/common/websocket-server",
      "${editline_root}:editline",
    ]
  }

  if (config_enable_yaml_tests) {
    sources += [ "${chip_tool_root}/commands/tests/TestCommand.cpp" ]
  }

  public_deps = [
    "${chip_root}/src/app/server",
    "${chip_root}/src/app/tests/suites/commands/commissioner",
    "${chip_root}/src/app/tests/suites/commands/delay",
    "${chip_root}/src/app/tests/suites/commands/discovery",
    "${chip_root}/src/app/tests/suites/commands/interaction_model",
    "${chip_root}/src/app/tests/suites/commands/log",
    "${chip_root}/src/app/tests/suites/commands/system",
    "${chip_root}/src/app/tests/suites/pics",
    "${chip_root}/src/controller/data_model",
    "${chip_root}/src/credentials:file_attestation_trust_store",
    "${chip_root}/src/lib",
    "${chip_root}/src/lib/support/jsontlv",
    "${chip_root}/src/platform",
    "${chip_root}/third_party/inipp",
    "${chip_root}/third_party/jsoncpp",
  ]

  public_configs = [ ":config", ":iotivity_library" ]

  if (chip_enable_transport_trace) {
    public_deps +=
        [ "${chip_root}/examples/common/tracing:trace_handlers_decoder" ]
  }

  output_dir = root_out_dir
}


shared_library("matter_translator_plugin") {
  sources = [
    "matter_client.cpp",
    "bridge_interface.cpp",
    "MatterTaskHandler.cpp",
    "MatterTranslator.cpp",
    "MatterNode.cpp"
  ]
  deps = [
    ":chip-tool-utils",
    "${chip_root}/src/platform/logging:force_stdio",
  ]
  output_dir = root_out_dir
}

group("default") {
  deps = [ ":matter_translator_plugin" ]
}
