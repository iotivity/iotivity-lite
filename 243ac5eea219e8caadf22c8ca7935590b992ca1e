{
  "comments": [
    {
      "key": {
        "uuid": "9a3d3df0_1ff38374",
        "filename": "api/oc_buffer.c",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 13
      },
      "writtenOn": "2018-10-04T09:04:48Z",
      "side": 1,
      "message": "We may not need to make the additional API with _except_data suffix. Using build MACRO, handle cases inside allocate_message(pool).",
      "range": {
        "startLine": 147,
        "startChar": 37,
        "endLine": 147,
        "endChar": 49
      },
      "revId": "243ac5eea219e8caadf22c8ca7935590b992ca1e",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_9f64b3e6",
        "filename": "messaging/coap/engine.c",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1225
      },
      "writtenOn": "2018-10-02T08:02:40Z",
      "side": 1,
      "message": "why the message is unrefered when ack_message is null?",
      "range": {
        "startLine": 113,
        "startChar": 6,
        "endLine": 113,
        "endChar": 36
      },
      "revId": "243ac5eea219e8caadf22c8ca7935590b992ca1e",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_ff4dffc5",
        "filename": "messaging/coap/engine.c",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 475
      },
      "writtenOn": "2018-10-04T06:45:43Z",
      "side": 1,
      "message": "it is \"else\" case for  checking whether \"ack_message-\u003edata\" is null, although ack_message is allocated.\n\nSo oc_message_unref is required in order to free ack_message.",
      "parentUuid": "9a3d3df0_9f64b3e6",
      "range": {
        "startLine": 113,
        "startChar": 6,
        "endLine": 113,
        "endChar": 36
      },
      "revId": "243ac5eea219e8caadf22c8ca7935590b992ca1e",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_ff617fd4",
        "filename": "messaging/coap/engine.c",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 1225
      },
      "writtenOn": "2018-10-02T08:02:40Z",
      "side": 1,
      "message": "why this function is used when OC_BLOCK_WISE flag is on?",
      "range": {
        "startLine": 252,
        "startChar": 8,
        "endLine": 252,
        "endChar": 40
      },
      "revId": "243ac5eea219e8caadf22c8ca7935590b992ca1e",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_3fc76714",
        "filename": "messaging/coap/engine.c",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 475
      },
      "writtenOn": "2018-10-04T06:45:43Z",
      "side": 1,
      "message": "Since  transaction-\u003emessage-\u003edata is used as a parameter of  oc_ri_invoke_coap_entity_handler() at line 423 \n\nLogically, oc_ri_invoke_coap_entity_handler() is almost  called right after coap_new_transaction() under Not OC_BLOCK_WISE.\n\nMoreover using the same coap_new_transaction_except_data() needs more code including additional allocation and checking NULL before calling   oc_ri_invoke_coap_entity_handler() under Not OC_BLOCK_WISE \n\nDue to these reason, I have used OC_BLOCK_WISE for dividing them",
      "parentUuid": "9a3d3df0_ff617fd4",
      "range": {
        "startLine": 252,
        "startChar": 8,
        "endLine": 252,
        "endChar": 40
      },
      "revId": "243ac5eea219e8caadf22c8ca7935590b992ca1e",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_a8085f2e",
        "filename": "port/linux/ipadapter.c",
        "patchSetId": 1
      },
      "lineNbr": 830,
      "author": {
        "id": 1225
      },
      "writtenOn": "2018-10-17T05:12:31Z",
      "side": 1,
      "message": "How about temp_data allocating logic exteranl if statement?\nif and allocation is duplicated in every socket.",
      "range": {
        "startLine": 829,
        "startChar": 8,
        "endLine": 830,
        "endChar": 24
      },
      "revId": "243ac5eea219e8caadf22c8ca7935590b992ca1e",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_0806ab20",
        "filename": "port/linux/ipadapter.c",
        "patchSetId": 1
      },
      "lineNbr": 966,
      "author": {
        "id": 1225
      },
      "writtenOn": "2018-10-17T05:12:31Z",
      "side": 1,
      "message": "we can use \u0027message-\u003elength \u003e 0\u0027 instead of temp_data.",
      "range": {
        "startLine": 966,
        "startChar": 10,
        "endLine": 966,
        "endChar": 19
      },
      "revId": "243ac5eea219e8caadf22c8ca7935590b992ca1e",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_53ffc401",
        "filename": "port/linux/ipadapter.c",
        "patchSetId": 1
      },
      "lineNbr": 973,
      "author": {
        "id": 1225
      },
      "writtenOn": "2018-10-17T05:12:31Z",
      "side": 1,
      "message": "we need to handle message-\u003edata is null in case.\nhow about change logic like below?\nif (!message-\u003edata) {\n  /* Error orrur */\n}\nmemcpy(message-\u003edata, temp_data, message-\u003elength);",
      "range": {
        "startLine": 971,
        "startChar": 10,
        "endLine": 973,
        "endChar": 11
      },
      "revId": "243ac5eea219e8caadf22c8ca7935590b992ca1e",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_93094c2f",
        "filename": "port/linux/ipadapter.c",
        "patchSetId": 1
      },
      "lineNbr": 983,
      "author": {
        "id": 1225
      },
      "writtenOn": "2018-10-17T05:12:31Z",
      "side": 1,
      "message": "if we always use temp_data and replace it, how about just use oc_allocate_message() function (not execpt_data) and replace it to temp_data?\nIf we need to change size, message-\u003edata will be freed and temp_data is replaced. I think that is more simple and we can handle same logic with tcp also.",
      "range": {
        "startLine": 966,
        "startChar": 6,
        "endLine": 983,
        "endChar": 7
      },
      "revId": "243ac5eea219e8caadf22c8ca7935590b992ca1e",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_3304c014",
        "filename": "port/linux/tcpadapter.c",
        "patchSetId": 1
      },
      "lineNbr": 391,
      "author": {
        "id": 1225
      },
      "writtenOn": "2018-10-17T05:12:31Z",
      "side": 1,
      "message": "Actually pipe data is not used in anywhere. I think we don\u0027t need this logic for pipe data. (received pipe data is just garbage data to use only wake up receive thread)",
      "range": {
        "startLine": 363,
        "startChar": 0,
        "endLine": 391,
        "endChar": 35
      },
      "revId": "243ac5eea219e8caadf22c8ca7935590b992ca1e",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    }
  ]
}