CC = gcc
CCFLAGS = -c -fPIC -fno-asynchronous-unwind-tables -fno-omit-frame-pointer \
-ffreestanding -Os -fno-stack-protector -ffunction-sections -fdata-sections \
-fno-reorder-functions -fno-defer-pop -fno-strict-overflow -Wall -Wextra -Werror \
-pedantic -g -O0 -Wno-unused-parameter -Wno-strict-aliasing -Wno-unused-function \
-Wno-unused-variable -Wno-sign-compare -Wno-address
CCPATH = -I"$$JAVA_HOME/include/" -I"$$JAVA_HOME/include/linux/" -I../.. \
-I../../include/ -I../../port/ -I../../port/linux/ -I../../util/ \
-I../../deps/tinycbor/src/
CCDEFINES = -D__OC_RANDOM -DOC_CLIENT -DOC_SERVER -DOC_IPV4 -DOC_DYNAMIC_ALLOCATION -DOC_DEBUG -DOC_SECURITY

SWIG_INTERFACES_DIR = ../swig_interfaces

SWIG_C_SRC_DIR = .
SWIG_C_OUT_DIR = ../iotivity-lite-java/jni
SWIG_OBJ_OUT_DIR = ./obj

SWIG_JAVA_EXTRA_SRC_DIR = ../oc_java
SWIG_JAVA_EXTRA_OC_SRC_DIR = ../oc_java/oc

SWIG_JAVA_SRC_DIR = ../iotivity-lite-java/src
SWIG_JAVA_SRC_IOTIVITY_DIR = $(SWIG_JAVA_SRC_DIR)/org/iotivity
SWIG_JAVA_SRC_IOTIVITY_OC_DIR = $(SWIG_JAVA_SRC_DIR)/org/iotivity/oc
SWIG_JAVA_BIN_OUT_DIR = ../iotivity-lite-java/bin

SWIG_INTERFACES = oc_obt.i oc_uuid.i oc_collection.i oc_endpoint.i oc_pki.i \
    oc_rep.i oc_api.i oc_clock.i oc_storage.i oc_acl.i

SWIG_WRAPFILES = oc_api_wrap.c oc_collection_wrap.c oc_pki_wrap.c oc_storage_wrap.c \
    oc_clock_wrap.c oc_endpoint_wrap.c oc_obt_wrap.c oc_rep_wrap.c oc_uuid_wrap.c

SWIG_OBJ_WRAPFILES = ${patsubst %.c,%.o,$(SWIG_WRAPFILES)}

# Hand writen code that is used in swig wraper output.
SWIG_EXTRA_C_CODE = oc_iotivity_lite_jni.h

#output java files from swig build
SWIG_JAVA_CODE = CborEncoder.java OCCollectionUtilJNI.java OCPki.java \
    OCUuidUtilConstants.java DevAddr.java OCEndpoint.java OCPkiJNI.java \
    OCUuidUtil.java OCAceConnectionType.java OCEndpointUtil.java OCRep.java \
    OCUuidUtilJNI.java OCAceResource.java OCEndpointUtilJNI.java OCRepJNI.java \
    OCValue.java OCAceWildcard.java OCFVersion.java OCRepresentation.java \
    OCArray.java OCIPv4Addr.java OCSecurityAce.java OCClockConstants.java \
    OCIPv6Addr.java OCSpTypesMask.java OCClock.java OCLEAddr.java OCStorage.java \
    OCClockJNI.java OCLink.java OCStorageJNI.java OCCollection.java OCObt.java \
    OCType.java OCCollectionUtil.java OCObtJNI.java OCUuid.java

# List of functions used by the swig output but not generated by swig
# (i.e callbacks, typemasks, etc)
SWIG_EXTRA_JAVA_CODE = OCFactoryPresetsHandler.java OCObtDiscoveryHandler.java \
    OCResourcePropertiesMask.java OCAcePermissionsMask.java OCInitPlatformHandler.java \
    OCObtStatusHandler.java OCResponseHandler.java OCAddDeviceHandler.java \
    OCInterfaceMask.java OCQueryValue.java OCSpTypesMask.java OCConWriteHandler.java \
    OCMainInitHandler.java OCRandomPinHandler.java OCTransportFlags.java \
    OCDiscoveryHandler.java OCObtDeviceStatusHandler.java OCRequestHandler.java \
    OCTriggerHandler.java
 
# Object Oriented version of Java output
SWIG_EXTRA_JAVA_OC_CODE = OcAceResource.java OcCborEncoder.java OcLink.java \
    OcRepresentation.java OcSubjectSecurityAce.java OcAnonSecurityAce.java \
    OcCollection.java OcObt.java OcResource.java OcUtils.java \
    OcAuthSecurityAce.java OcDevice.java OcPlatform.java OcSecurityAce.java

all : make_swig make_jni_lib make_iotivity_lite_jar

make_swig : ${addprefix $(SWIG_C_OUT_DIR)/, $(SWIG_WRAPFILES)} install_extra_c install_extra_java
make_jni_lib : libiotivity-lite-jni.so
make_iotivity_lite_jar : iotivity-lite.jar

# copy hand coded headers and C code to expected folders for later build steps
install_extra_c : ${addprefix $(SWIG_C_OUT_DIR)/, $(SWIG_EXTRA_C_CODE)}

$(SWIG_C_OUT_DIR)/%.h : $(SWIG_C_SRC_DIR)/%.h
	@echo "$< ==> $@"
	@[[ -e $< ]] || (echo "some error for $<" && false)
	@mkdir -p $(dir $@)
	@cp  $< $@

$(SWIG_C_OUT_DIR)/%.c : $(SWIG_C_SRC_DIR)/%.c
	@echo "$< ==> $@"
	@[[ -e $< ]] || (echo "some error for $<" && false)
	@mkdir -p $(dir $@)
	@cp  $< $@

# copy hand coded Java code to the expected folders for later build steps
install_extra_java: ${addprefix $(SWIG_JAVA_SRC_IOTIVITY_DIR)/, $(SWIG_EXTRA_JAVA_CODE)} ${addprefix $(SWIG_JAVA_SRC_IOTIVITY_OC_DIR)/, $(SWIG_EXTRA_JAVA_OC_CODE)}

$(SWIG_JAVA_SRC_IOTIVITY_DIR)/%.java : $(SWIG_JAVA_EXTRA_SRC_DIR)/%.java
	@echo "$< ==> $@"
	@[[ -e $< ]] || (echo "some error for $<" && false)
	@mkdir -p $(dir $@)
	@cp  $< $@

$(SWIG_JAVA_SRC_IOTIVITY_OC_DIR)/%.java : $(SWIG_JAVA_EXTRA_OC_SRC_DIR)/%.java
	@echo "$< ==> $@"
	@[[ -e $< ]] || (echo "some error for $<" && false)
	@mkdir -p $(dir $@)
	@cp  $< $@

$(SWIG_C_OUT_DIR)/%_wrap.c : $(SWIG_INTERFACES_DIR)/%.i
	swig -java -package org.iotivity -outdir $(SWIG_JAVA_SRC_IOTIVITY_DIR) -D__linux__ -I../.. -I../../port/linux/ -I../../include/ -I../../security/ -o $(SWIG_C_OUT_DIR)/$*_wrap.c $(SWIG_INTERFACES_DIR)/$*.i

# currently assumes that the object files for port/linux have already been built
libiotivity-lite-jni.so : make_swig ${addprefix $(SWIG_OBJ_OUT_DIR)/, $(SWIG_OBJ_WRAPFILES)}
	$(CC) -shared ${addprefix $(SWIG_OBJ_OUT_DIR)/, $(SWIG_OBJ_WRAPFILES)} \
	../../port/linux/obj/*.o ../../port/linux/obj/client_server/*.o  \
	-lm -lpthread -lrt -o $@

# compile swig generated C/C++ files
$(SWIG_OBJ_OUT_DIR)/%.o : $(SWIG_C_OUT_DIR)/%.c
	mkdir -p $(SWIG_OBJ_OUT_DIR)
	$(CC) $(CCFLAGS) $(CCDEFINES) $(CCPATH) $< -o $@

# compile swig generated java files and custom java files
iotivity-lite.jar : make_swig
	mkdir -p $(SWIG_JAVA_BIN_OUT_DIR)
	javac -source 1.7 -target 1.7 -bootclasspath "$$JAVA_HOME/jre/lib/rt.jar" -sourcepath $(SWIG_JAVA_SRC_DIR) -d $(SWIG_JAVA_BIN_OUT_DIR) \
	$(SWIG_JAVA_SRC_IOTIVITY_DIR)/*.java $(SWIG_JAVA_SRC_IOTIVITY_OC_DIR)/*.java
	jar -cfv $@ -C $(SWIG_JAVA_BIN_OUT_DIR) .

.PHONY: clean
clean:
	rm -f $(SWIG_C_OUT_DIR)/*.h
	rm -f $(SWIG_C_OUT_DIR)/*.c
	rm -f $(SWIG_JAVA_SRC_IOTIVITY_OC_DIR)/*.java
	rm -f $(SWIG_JAVA_SRC_IOTIVITY_DIR)/*.java
	rm -fr $(SWIG_JAVA_BIN_OUT_DIR)
	rm -fr $(SWIG_OBJ_OUT_DIR)
	rm iotivity-lite.jar
	rm libiotivity-lite-jni.so
