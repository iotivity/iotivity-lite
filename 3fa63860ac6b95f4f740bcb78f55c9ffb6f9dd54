{
  "comments": [
    {
      "key": {
        "uuid": "595829b5_a917dd17",
        "filename": "api/oc_rep.c",
        "patchSetId": 10
      },
      "lineNbr": 685,
      "author": {
        "id": 21
      },
      "writtenOn": "2019-11-06T04:36:30Z",
      "side": 1,
      "message": "Why do we need this? Can\u0027t we just use the non-dynamic version below? It would be good to avoid the calloc().",
      "range": {
        "startLine": 671,
        "startChar": 0,
        "endLine": 685,
        "endChar": 31
      },
      "revId": "3fa63860ac6b95f4f740bcb78f55c9ffb6f9dd54",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f4b437f_dfd61582",
        "filename": "api/oc_rep.c",
        "patchSetId": 10
      },
      "lineNbr": 685,
      "author": {
        "id": 4407
      },
      "writtenOn": "2019-11-06T18:19:56Z",
      "side": 1,
      "message": "I had to look at the code for a while to remember why I used to calloc vs. the version bellow.\n\nIts been some time since I wrote this but if I remember correctly the dynamic allocated version would return a valid JSON string even if the input string buffer was too small.  While the non-dynamic allocated version may create an invalid JSON string because it can not check the return value of oc_base64_encode it just writes it directly to the buffer.\n\nI will double check.",
      "parentUuid": "595829b5_a917dd17",
      "range": {
        "startLine": 671,
        "startChar": 0,
        "endLine": 685,
        "endChar": 31
      },
      "revId": "3fa63860ac6b95f4f740bcb78f55c9ffb6f9dd54",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65d2e265_b0857977",
        "filename": "api/oc_rep.c",
        "patchSetId": 10
      },
      "lineNbr": 685,
      "author": {
        "id": 21
      },
      "writtenOn": "2019-11-06T18:36:17Z",
      "side": 1,
      "message": "Okay. But since you know the size of the b64 string and I think you know the leftover space in the buffer, I suppose you could choose to return a failure if the buffer cannot accommodate the whole JSON string.",
      "parentUuid": "8f4b437f_dfd61582",
      "range": {
        "startLine": 671,
        "startChar": 0,
        "endLine": 685,
        "endChar": 31
      },
      "revId": "3fa63860ac6b95f4f740bcb78f55c9ffb6f9dd54",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "298a2ad6_3a813f27",
        "filename": "api/oc_rep.c",
        "patchSetId": 10
      },
      "lineNbr": 685,
      "author": {
        "id": 4407
      },
      "writtenOn": "2019-11-08T20:02:20Z",
      "side": 1,
      "message": "Dynamic memory section removed.",
      "parentUuid": "65d2e265_b0857977",
      "range": {
        "startLine": 671,
        "startChar": 0,
        "endLine": 685,
        "endChar": 31
      },
      "revId": "3fa63860ac6b95f4f740bcb78f55c9ffb6f9dd54",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bdeb835d_e6fa3fca",
        "filename": "api/oc_rep.c",
        "patchSetId": 10
      },
      "lineNbr": 733,
      "author": {
        "id": 21
      },
      "writtenOn": "2019-11-06T04:36:30Z",
      "side": 1,
      "message": "If the root-level container is an array of objects, then rep-\u003ename will be empty.\nSo, put this inside the if-block:\n\nif (oc_string_len(rep-\u003ename) \u003e 0) {\n\n...\n\n}",
      "range": {
        "startLine": 729,
        "startChar": 0,
        "endLine": 733,
        "endChar": 36
      },
      "revId": "3fa63860ac6b95f4f740bcb78f55c9ffb6f9dd54",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80ec01b1_3b2bf07c",
        "filename": "api/oc_rep.c",
        "patchSetId": 10
      },
      "lineNbr": 733,
      "author": {
        "id": 4407
      },
      "writtenOn": "2019-11-06T18:19:56Z",
      "side": 1,
      "message": "I did not know the root object could be an object_array.  I will update thanks.\n\nI may contact you to figure out how to make a root level object_array.",
      "parentUuid": "bdeb835d_e6fa3fca",
      "range": {
        "startLine": 729,
        "startChar": 0,
        "endLine": 733,
        "endChar": 36
      },
      "revId": "3fa63860ac6b95f4f740bcb78f55c9ffb6f9dd54",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abf7253c_230b754e",
        "filename": "api/oc_rep.c",
        "patchSetId": 10
      },
      "lineNbr": 733,
      "author": {
        "id": 21
      },
      "writtenOn": "2019-11-06T18:36:17Z",
      "side": 1,
      "message": "To encode a root-level object array is bit hacky at the moment, and I think only /oic/res and Collections do it internally. I don\u0027t think any of the other resource schemas are defined that way.\nAnyhow, when handed an object array, the oc_rep parser returns the first object in the object array, i.e. the head oc_rep_t* points to that first object. So, the receiver needs to iterate through all the properties of that object (accessed via head_rep-\u003evalue.object) and further process any remaining objects (in the object array) through head_rep-\u003enext.",
      "parentUuid": "80ec01b1_3b2bf07c",
      "range": {
        "startLine": 729,
        "startChar": 0,
        "endLine": 733,
        "endChar": 36
      },
      "revId": "3fa63860ac6b95f4f740bcb78f55c9ffb6f9dd54",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4eef1c60_0aefd0aa",
        "filename": "api/oc_rep.c",
        "patchSetId": 10
      },
      "lineNbr": 733,
      "author": {
        "id": 21
      },
      "writtenOn": "2019-11-06T18:47:01Z",
      "side": 1,
      "message": "Forgot to add: you would use oc_rep_start_links_array()/end_links_array() and define objects in that array. Some 3-4 years ago, the primary use case for root-level object arrays was to return an array of links through the links-list interface. So, I\u0027d named it as such. Perhaps we could call it \"root_array\" instead. The primary reason it felt \"hacky\" was that I reused this construct to return a root-level object array that was not technically an array of links (in the collections batch response).",
      "parentUuid": "abf7253c_230b754e",
      "range": {
        "startLine": 729,
        "startChar": 0,
        "endLine": 733,
        "endChar": 36
      },
      "revId": "3fa63860ac6b95f4f740bcb78f55c9ffb6f9dd54",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ce79810_3a51738e",
        "filename": "api/oc_rep.c",
        "patchSetId": 10
      },
      "lineNbr": 733,
      "author": {
        "id": 4407
      },
      "writtenOn": "2019-11-08T20:02:20Z",
      "side": 1,
      "message": "Thanks Kishen I referenced the client_collection_linux sample and built a unit test that creates a root object array.\n\nThe only thing I could find that destinguised a root object array and root object populated with objects was the empty rep-\u003ename.\n\nIs there any other way to tell if the root object is an array object? If so feel free to leave a comment on the commit.",
      "parentUuid": "4eef1c60_0aefd0aa",
      "range": {
        "startLine": 729,
        "startChar": 0,
        "endLine": 733,
        "endChar": 36
      },
      "revId": "3fa63860ac6b95f4f740bcb78f55c9ffb6f9dd54",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8446077f_d28bdbd3",
        "filename": "api/oc_rep.c",
        "patchSetId": 10
      },
      "lineNbr": 733,
      "author": {
        "id": 4407
      },
      "writtenOn": "2019-11-08T20:05:33Z",
      "side": 1,
      "message": "oh I think changing the oc_rep_start_links_array to oc_rep_start_root_array would make a lot of since. It does feel a little hacky using the links_array as you already pointed out.",
      "parentUuid": "3ce79810_3a51738e",
      "range": {
        "startLine": 729,
        "startChar": 0,
        "endLine": 733,
        "endChar": 36
      },
      "revId": "3fa63860ac6b95f4f740bcb78f55c9ffb6f9dd54",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9db83d2_5f058a9d",
        "filename": "api/oc_rep.c",
        "patchSetId": 10
      },
      "lineNbr": 733,
      "author": {
        "id": 21
      },
      "writtenOn": "2019-11-08T23:10:10Z",
      "side": 1,
      "message": "\u003e The only thing I could find that destinguised a root object array and root object populated \n\u003e with objects was the empty rep-\u003ename.\n\nNo, I think this might also be the case for objects in a non root-level array of objects.\n\n\u003e Is there any other way to tell if the root object is an array object? \n\nThe sure way to know is when the first oc_rep_t * (the head/root) handed to you is an OC_REP_OBJECT.\n\nUsually when you\u0027re walking through an oc_rep_t and encounter an object array, you see a special marker oc_rep_t of type OC_REP_OBJECT_ARRAY whose value.object_array points to the first OC_REP_OBJECT in that array; that oc_rep_t\u0027s value.object takes you through the series of properties it contains.\n\nIt\u0027s just that when oc_parse_rep() construct\u0027s oc_rep_ts, it does not add an OC_REP_OBJECT_ARRAY marker for the root-level array, and instead directly gives you the first OC_REP_OBJECT in that array\n\n\u003e oh I think changing the oc_rep_start_links_array to oc_rep_start_root_array would make a lot \n\u003e of since. It does feel a little hacky using the links_array as you already pointed out.\n\nYes, that would be something to do.",
      "parentUuid": "8446077f_d28bdbd3",
      "range": {
        "startLine": 729,
        "startChar": 0,
        "endLine": 733,
        "endChar": 36
      },
      "revId": "3fa63860ac6b95f4f740bcb78f55c9ffb6f9dd54",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd2f1cd9_200c524b",
        "filename": "api/oc_rep.c",
        "patchSetId": 10
      },
      "lineNbr": 980,
      "author": {
        "id": 21
      },
      "writtenOn": "2019-11-06T04:36:30Z",
      "side": 1,
      "message": "Change to:\n\nobject_array?\"[\\n\":\"{\\n\"\n\nRepeat for the other 3 cases below.",
      "range": {
        "startLine": 980,
        "startChar": 61,
        "endLine": 980,
        "endChar": 67
      },
      "revId": "3fa63860ac6b95f4f740bcb78f55c9ffb6f9dd54",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "848549e7_3f9ae251",
        "filename": "api/oc_rep.c",
        "patchSetId": 10
      },
      "lineNbr": 980,
      "author": {
        "id": 21
      },
      "writtenOn": "2019-11-06T04:36:30Z",
      "side": 1,
      "message": "The root-level container could also be an array of objects. So, add:\n\nbool object_array \u003d (rep-\u003etype \u003d\u003d OC_REP_OBJECT)?true:false;",
      "revId": "3fa63860ac6b95f4f740bcb78f55c9ffb6f9dd54",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d40fd8e4_18192b16",
        "filename": "api/oc_rep.c",
        "patchSetId": 10
      },
      "lineNbr": 980,
      "author": {
        "id": 4407
      },
      "writtenOn": "2019-11-06T18:19:56Z",
      "side": 1,
      "message": "I did not know the root object could be an object_array.  I will update thanks.",
      "parentUuid": "848549e7_3f9ae251",
      "revId": "3fa63860ac6b95f4f740bcb78f55c9ffb6f9dd54",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a189b7a9_a5d3fda9",
        "filename": "api/oc_rep.c",
        "patchSetId": 10
      },
      "lineNbr": 980,
      "author": {
        "id": 4407
      },
      "writtenOn": "2019-11-08T20:02:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd2f1cd9_200c524b",
      "range": {
        "startLine": 980,
        "startChar": 61,
        "endLine": 980,
        "endChar": 67
      },
      "revId": "3fa63860ac6b95f4f740bcb78f55c9ffb6f9dd54",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c40fae50_bfab9e2e",
        "filename": "api/oc_rep.c",
        "patchSetId": 10
      },
      "lineNbr": 980,
      "author": {
        "id": 4407
      },
      "writtenOn": "2019-11-08T20:02:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d40fd8e4_18192b16",
      "revId": "3fa63860ac6b95f4f740bcb78f55c9ffb6f9dd54",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    }
  ]
}