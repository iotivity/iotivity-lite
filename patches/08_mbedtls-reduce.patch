From f722916469219d854667ab6842f2c6fbac6599c0 Mon Sep 17 00:00:00 2001
From: Oleksii Beketov <ol.beketov@samsung.com>
Date: Thu, 28 Feb 2019 14:21:10 +0200
Subject: [PATCH] Reduce MbedTLS

Reduce MbedTLS routines due memory optimization

Signed-off-by: Oleksii Beketov <ol.beketov@samsung.com>
---
 include/mbedtls/config.h | 20 ++++++++++++++++----
 include/mbedtls/sha512.h | 18 ------------------
 library/asn1parse.c      | 18 ++++++++++++++++++
 library/bignum.c         | 44 ++++++++++++++++++++++++++++++++++++++++++++
 library/ecdsa.c          | 20 ++++++++++++++++++++
 library/pk.c             | 20 ++++++++++++++++++++
 library/pkparse.c        | 20 ++++++++++++++++++++
 library/ssl_cli.c        | 15 +++++++++++++++
 8 files changed, 153 insertions(+), 22 deletions(-)

diff --git a/include/mbedtls/config.h b/include/mbedtls/config.h
index 0cf4741..7fefd85 100644
--- a/include/mbedtls/config.h
+++ b/include/mbedtls/config.h
@@ -52,17 +52,26 @@
 /* mbed TLS modules */
 #define MBEDTLS_AES_C
 #define MBEDTLS_CIPHER_C
-#define MBEDTLS_CTR_DRBG_C
-#define MBEDTLS_ENTROPY_C
 #define MBEDTLS_MD_C
 #define MBEDTLS_SHA256_C
+#define MBEDTLS_SHA512_C
 #define MBEDTLS_SSL_COOKIE_C
 #define MBEDTLS_SSL_CLI_C
 #define MBEDTLS_SSL_SRV_C
 #define MBEDTLS_SSL_TLS_C
 
+/* Raw Public Key*/
+#define MBEDTLS_ECDH_C
+#define MBEDTLS_ECP_DP_CURVE25519_ENABLED
+#define MBEDTLS_ENTROPY_C
+#define MBEDTLS_CTR_DRBG_C
+#define MBEDTLS_PKCS5_C
+#define MBEDTLS_BASE64_C
+
 /* Save RAM at the expense of ROM */
+#ifndef ST_MBEDTLS_OPT
 #define MBEDTLS_AES_ROM_TABLES
+#endif
 
 /* Save some RAM by adjusting to your exact needs */
 #define MBEDTLS_PSK_MAX_LEN    16 /* 128-bits keys are generally enough */
@@ -85,12 +94,13 @@
 #define MBEDTLS_BIGNUM_C
 #define MBEDTLS_KEY_EXCHANGE_ECDH_ANON_ENABLED
 #define MBEDTLS_ECDH_C
+#ifndef ST_MBEDTLS_OPT
 #define MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED
-#define MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED
 #define MBEDTLS_RSA_C
 #define MBEDTLS_PKCS1_V15
+#endif
+#define MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED
 #define MBEDTLS_X509_CRT_PARSE_C
-
 #define MBEDTLS_X509_USE_C
 
 #define MBEDTLS_ASN1_PARSE_C
@@ -101,7 +111,9 @@
 #define MBEDTLS_ASN1_WRITE_C
 #define MBEDTLS_ECDSA_C
 #define MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
+#ifndef ST_MBEDTLS_OPT
 #define MBEDTLS_CCM_C
+#endif
 
 #define MBEDTLS_CIPHER_MODE_CBC
 
diff --git a/include/mbedtls/sha512.h b/include/mbedtls/sha512.h
index 52ae204..b6e6a61 100644
--- a/include/mbedtls/sha512.h
+++ b/include/mbedtls/sha512.h
@@ -164,24 +164,6 @@ MBEDTLS_DEPRECATED static inline void mbedtls_sha512_starts(
 }
 
 /**
- * \brief          This function feeds an input buffer into an ongoing
- *                 SHA-512 checksum calculation.
- *
- * \deprecated     Superseded by mbedtls_sha512_update_ret() in 2.7.0
- *
- * \param ctx      The SHA-512 context.
- * \param input    The buffer holding the data.
- * \param ilen     The length of the input data.
- */
-MBEDTLS_DEPRECATED static inline void mbedtls_sha512_update(
-                                                mbedtls_sha512_context *ctx,
-                                                const unsigned char *input,
-                                                size_t ilen )
-{
-    mbedtls_sha512_update_ret( ctx, input, ilen );
-}
-
-/**
  * \brief          This function finishes the SHA-512 operation, and writes
  *                 the result to the output buffer.
  *
diff --git a/library/asn1parse.c b/library/asn1parse.c
index 4dd65c0..e2e1a96 100644
--- a/library/asn1parse.c
+++ b/library/asn1parse.c
@@ -336,6 +336,7 @@ int mbedtls_asn1_get_alg_null( unsigned char **p,
                        const unsigned char *end,
                        mbedtls_asn1_buf *alg )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret;
     mbedtls_asn1_buf params;
 
@@ -348,10 +349,15 @@ int mbedtls_asn1_get_alg_null( unsigned char **p,
         return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 
     return( 0 );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 void mbedtls_asn1_free_named_data( mbedtls_asn1_named_data *cur )
 {
+#ifndef ST_MBEDTLS_OPT
     if( cur == NULL )
         return;
 
@@ -359,10 +365,14 @@ void mbedtls_asn1_free_named_data( mbedtls_asn1_named_data *cur )
     mbedtls_free( cur->val.p );
 
     mbedtls_zeroize( cur, sizeof( mbedtls_asn1_named_data ) );
+#else
+    oc_abort(__func__);
+#endif /* ST_MBEDTLS_OPT */
 }
 
 void mbedtls_asn1_free_named_data_list( mbedtls_asn1_named_data **head )
 {
+#ifndef ST_MBEDTLS_OPT
     mbedtls_asn1_named_data *cur;
 
     while( ( cur = *head ) != NULL )
@@ -371,11 +381,15 @@ void mbedtls_asn1_free_named_data_list( mbedtls_asn1_named_data **head )
         mbedtls_asn1_free_named_data( cur );
         mbedtls_free( cur );
     }
+#else
+    oc_abort(__func__);
+#endif /* ST_MBEDTLS_OPT */
 }
 
 mbedtls_asn1_named_data *mbedtls_asn1_find_named_data( mbedtls_asn1_named_data *list,
                                        const char *oid, size_t len )
 {
+#ifndef ST_MBEDTLS_OPT
     while( list != NULL )
     {
         if( list->oid.len == len &&
@@ -388,6 +402,10 @@ mbedtls_asn1_named_data *mbedtls_asn1_find_named_data( mbedtls_asn1_named_data *
     }
 
     return( list );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 #endif /* MBEDTLS_ASN1_PARSE_C */
diff --git a/library/bignum.c b/library/bignum.c
index f3b7ef8..17f234c 100644
--- a/library/bignum.c
+++ b/library/bignum.c
@@ -504,6 +504,7 @@ cleanup:
  */
 static int mpi_write_hlp( mbedtls_mpi *X, int radix, char **p )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret;
     mbedtls_mpi_uint r;
 
@@ -524,6 +525,10 @@ static int mpi_write_hlp( mbedtls_mpi *X, int radix, char **p )
 cleanup:
 
     return( ret );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif  /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -532,6 +537,7 @@ cleanup:
 int mbedtls_mpi_write_string( const mbedtls_mpi *X, int radix,
                               char *buf, size_t buflen, size_t *olen )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret = 0;
     size_t n;
     char *p;
@@ -600,6 +606,10 @@ cleanup:
     mbedtls_mpi_free( &T );
 
     return( ret );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif  /* ST_MBEDTLS_OPT */
 }
 
 #if defined(MBEDTLS_FS_IO)
@@ -1102,6 +1112,7 @@ cleanup:
  */
 int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
 {
+#ifndef ST_MBEDTLS_OPT
     mbedtls_mpi _B;
     mbedtls_mpi_uint p[1];
 
@@ -1111,6 +1122,10 @@ int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint
     _B.p = p;
 
     return( mbedtls_mpi_add_mpi( X, A, &_B ) );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif  /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -1470,6 +1485,7 @@ cleanup:
  */
 int mbedtls_mpi_div_int( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, mbedtls_mpi_sint b )
 {
+#ifndef ST_MBEDTLS_OPT
     mbedtls_mpi _B;
     mbedtls_mpi_uint p[1];
 
@@ -1479,6 +1495,10 @@ int mbedtls_mpi_div_int( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, m
     _B.p = p;
 
     return( mbedtls_mpi_div_mpi( Q, R, A, &_B ) );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif  /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -1509,6 +1529,7 @@ cleanup:
  */
 int mbedtls_mpi_mod_int( mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_sint b )
 {
+#ifndef ST_MBEDTLS_OPT
     size_t i;
     mbedtls_mpi_uint x, y, z;
 
@@ -1559,6 +1580,10 @@ int mbedtls_mpi_mod_int( mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_
     *r = y;
 
     return( 0 );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif  /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -1566,6 +1591,7 @@ int mbedtls_mpi_mod_int( mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_
  */
 static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
 {
+#ifndef ST_MBEDTLS_OPT
     mbedtls_mpi_uint x, m0 = N->p[0];
     unsigned int i;
 
@@ -1576,6 +1602,9 @@ static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
         x *= ( 2 - ( m0 * x ) );
 
     *mm = ~x + 1;
+#else
+    oc_abort(__func__);
+#endif  /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -1584,6 +1613,7 @@ static void mpi_montg_init( mbedtls_mpi_uint *mm, const mbedtls_mpi *N )
 static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                          const mbedtls_mpi *T )
 {
+#if defined(__TIZENRT__) || !defined(ST_MBEDTLS_OPT)
     size_t i, n, m;
     mbedtls_mpi_uint u0, u1, *d;
 
@@ -1619,6 +1649,10 @@ static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi
         mpi_sub_hlp( n, A->p, T->p );
 
     return( 0 );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif
 }
 
 /*
@@ -1626,6 +1660,7 @@ static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi
  */
 static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
 {
+#ifndef ST_MBEDTLS_OPT
     mbedtls_mpi_uint z = 1;
     mbedtls_mpi U;
 
@@ -1633,6 +1668,10 @@ static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint m
     U.p = &z;
 
     return( mpi_montmul( A, &U, N, mm, T ) );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif  /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -1640,6 +1679,7 @@ static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint m
  */
 int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret;
     size_t wbits, wsize, one = 1;
     size_t i, j, nblimbs;
@@ -1841,6 +1881,10 @@ cleanup:
         mbedtls_mpi_free( &RR );
 
     return( ret );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 /*
diff --git a/library/ecdsa.c b/library/ecdsa.c
index 826fefe..e535e08 100644
--- a/library/ecdsa.c
+++ b/library/ecdsa.c
@@ -74,6 +74,7 @@ int mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
                 const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret, key_tries, sign_tries, blind_tries;
     mbedtls_ecp_point R;
     mbedtls_mpi k, e, t;
@@ -157,6 +158,10 @@ cleanup:
     mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
 
     return( ret );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT*/
 }
 #endif /* MBEDTLS_ECDSA_SIGN_ALT */
 
@@ -292,6 +297,7 @@ cleanup:
 static int ecdsa_signature_to_asn1( const mbedtls_mpi *r, const mbedtls_mpi *s,
                                     unsigned char *sig, size_t *slen )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret;
     unsigned char buf[MBEDTLS_ECDSA_MAX_LEN];
     unsigned char *p = buf + sizeof( buf );
@@ -308,6 +314,10 @@ static int ecdsa_signature_to_asn1( const mbedtls_mpi *r, const mbedtls_mpi *s,
     *slen = len;
 
     return( 0 );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -319,6 +329,7 @@ int mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx, mbedtls_md_type_t
                            int (*f_rng)(void *, unsigned char *, size_t),
                            void *p_rng )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret;
     mbedtls_mpi r, s;
 
@@ -345,6 +356,10 @@ cleanup:
     mbedtls_mpi_free( &s );
 
     return( ret );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 #if ! defined(MBEDTLS_DEPRECATED_REMOVED) && \
@@ -417,8 +432,13 @@ cleanup:
 int mbedtls_ecdsa_genkey( mbedtls_ecdsa_context *ctx, mbedtls_ecp_group_id gid,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
 {
+#ifndef ST_MBEDTLS_OPT
     return( mbedtls_ecp_group_load( &ctx->grp, gid ) ||
             mbedtls_ecp_gen_keypair( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 #endif /* MBEDTLS_ECDSA_GENKEY_ALT */
 
diff --git a/library/pk.c b/library/pk.c
index b52c73f..efb47fe 100644
--- a/library/pk.c
+++ b/library/pk.c
@@ -258,6 +258,7 @@ int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
              unsigned char *sig, size_t *sig_len,
              int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
 {
+#ifndef ST_MBEDTLS_OPT
     if( ctx == NULL || ctx->pk_info == NULL ||
         pk_hashlen_helper( md_alg, &hash_len ) != 0 )
         return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
@@ -267,6 +268,10 @@ int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
 
     return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                      sig, sig_len, f_rng, p_rng ) );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -277,6 +282,7 @@ int mbedtls_pk_decrypt( mbedtls_pk_context *ctx,
                 unsigned char *output, size_t *olen, size_t osize,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
 {
+#ifndef ST_MBEDTLS_OPT
     if( ctx == NULL || ctx->pk_info == NULL )
         return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 
@@ -285,6 +291,10 @@ int mbedtls_pk_decrypt( mbedtls_pk_context *ctx,
 
     return( ctx->pk_info->decrypt_func( ctx->pk_ctx, input, ilen,
                 output, olen, osize, f_rng, p_rng ) );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -295,6 +305,7 @@ int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                 unsigned char *output, size_t *olen, size_t osize,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
 {
+#ifndef ST_MBEDTLS_OPT
     if( ctx == NULL || ctx->pk_info == NULL )
         return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 
@@ -303,6 +314,10 @@ int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
 
     return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                 output, olen, osize, f_rng, p_rng ) );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -310,6 +325,7 @@ int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
  */
 int mbedtls_pk_check_pair( const mbedtls_pk_context *pub, const mbedtls_pk_context *prv )
 {
+#ifndef ST_MBEDTLS_OPT
     if( pub == NULL || pub->pk_info == NULL ||
         prv == NULL || prv->pk_info == NULL ||
         prv->pk_info->check_pair_func == NULL )
@@ -329,6 +345,10 @@ int mbedtls_pk_check_pair( const mbedtls_pk_context *pub, const mbedtls_pk_conte
     }
 
     return( prv->pk_info->check_pair_func( pub->pk_ctx, prv->pk_ctx ) );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif
 }
 
 /*
diff --git a/library/pkparse.c b/library/pkparse.c
index e19511e..44ddbb7 100644
--- a/library/pkparse.c
+++ b/library/pkparse.c
@@ -179,6 +179,7 @@ int mbedtls_pk_parse_public_keyfile( mbedtls_pk_context *ctx, const char *path )
 static int pk_get_ecparams( unsigned char **p, const unsigned char *end,
                             mbedtls_asn1_buf *params )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret;
 
     /* Tag may be either OID or SEQUENCE */
@@ -206,6 +207,10 @@ static int pk_get_ecparams( unsigned char **p, const unsigned char *end,
                 MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 
     return( 0 );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif  /* ST_MBEDTLS_OPT */
 }
 
 #if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)
@@ -793,6 +798,7 @@ static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
                                   const unsigned char *key,
                                   size_t keylen )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret;
     int version, pubkey_done;
     size_t len;
@@ -911,6 +917,10 @@ static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
     }
 
     return( 0 );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 #endif /* MBEDTLS_ECP_C */
 
@@ -932,6 +942,7 @@ static int pk_parse_key_pkcs8_unencrypted_der(
                                     const unsigned char* key,
                                     size_t keylen )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret, version;
     size_t len;
     mbedtls_asn1_buf params;
@@ -1010,6 +1021,10 @@ static int pk_parse_key_pkcs8_unencrypted_der(
         return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 
     return( 0 );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 /*
@@ -1349,6 +1364,7 @@ int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
 int mbedtls_pk_parse_public_key( mbedtls_pk_context *ctx,
                          const unsigned char *key, size_t keylen )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret;
     unsigned char *p;
 #if defined(MBEDTLS_PEM_PARSE_C)
@@ -1389,6 +1405,10 @@ int mbedtls_pk_parse_public_key( mbedtls_pk_context *ctx,
 #endif
 
     return( ret );
+#else
+    oc_abort(__func__);
+    return( 0 );
+#endif /* ST_MBEDTLS_OPT */
 }
 
 #endif /* MBEDTLS_PK_PARSE_C */
diff --git a/library/ssl_cli.c b/library/ssl_cli.c
index e9b0d82..94ff8e7 100644
--- a/library/ssl_cli.c
+++ b/library/ssl_cli.c
@@ -1132,6 +1132,7 @@ static int ssl_parse_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               const unsigned char *buf,
                                               size_t len )
 {
+#ifndef ST_MBEDTLS_OPT
     /*
      * server should use the extension only if we did,
      * and if so the server's value should match ours (and len is always 1)
@@ -1147,6 +1148,10 @@ static int ssl_parse_max_fragment_length_ext( mbedtls_ssl_context *ssl,
     }
 
     return( 0 );
+#else
+  oc_abort(__func__);
+  return (0);
+#endif /* ST_MBEDTLS_OPT */
 }
 #endif /* MBEDTLS_SSL_MAX_FRAGMENT_LENGTH */
 
@@ -1246,6 +1251,7 @@ static int ssl_parse_supported_point_formats_ext( mbedtls_ssl_context *ssl,
                                                   const unsigned char *buf,
                                                   size_t len )
 {
+#ifndef ST_MBEDTLS_OPT
     size_t list_size;
     const unsigned char *p;
 
@@ -1282,6 +1288,10 @@ static int ssl_parse_supported_point_formats_ext( mbedtls_ssl_context *ssl,
     mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                     MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
     return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
+#else
+  oc_abort(__func__);
+  return (0);
+#endif /* ST_MBEDTLS_OPT */
 }
 #endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C || 
           MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
@@ -2075,6 +2085,7 @@ static int ssl_parse_server_psk_hint( mbedtls_ssl_context *ssl,
                                       unsigned char **p,
                                       unsigned char *end )
 {
+#ifndef ST_MBEDTLS_OPT
     int ret = 0;
     size_t n;
 
@@ -2141,6 +2152,10 @@ static int ssl_parse_server_psk_hint( mbedtls_ssl_context *ssl,
     *p += n;
 
     return( 0 );
+#else
+  oc_abort(__func__);
+  return (0);
+#endif /* ST_MBEDTLS_OPT */
 }
 #endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
 
-- 
1.9.1

