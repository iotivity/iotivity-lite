From e0d645aeca51324924bf81f3fdd09e3c7cebc931 Mon Sep 17 00:00:00 2001
From: Oleksii Beketov <ol.beketov@samsung.com>
Date: Mon, 4 Nov 2019 15:34:39 +0200
Subject: [PATCH] ocf-samsung-psk

---
 library/ssl_cli.c |  78 +++++++++++-----
 library/ssl_srv.c | 269 ++++++++++++++++++++++++++++++++++++++++--------------
 2 files changed, 253 insertions(+), 94 deletions(-)

diff --git a/library/ssl_cli.c b/library/ssl_cli.c
index 7a5e153..b9eeb0f 100644
--- a/library/ssl_cli.c
+++ b/library/ssl_cli.c
@@ -2114,40 +2114,72 @@ static int ssl_parse_server_psk_hint( mbedtls_ssl_context *ssl,
                                       unsigned char **p,
                                       unsigned char *end )
 {
-    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
-    size_t  len;
-    ((void) ssl);
+    int ret = 0;
+    size_t n;
+
+    if( ssl->conf->f_psk == NULL &&
+        ( ssl->conf->psk == NULL || ssl->conf->psk_identity == NULL ||
+          ssl->conf->psk_identity_len == 0 || ssl->conf->psk_len == 0 ) )
+    {
+        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no pre-shared key" ) );
+        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
+    }
 
     /*
-     * PSK parameters:
-     *
-     * opaque psk_identity_hint<0..2^16-1>;
+     * Receive client pre-shared key identity name
      */
-    if( end - (*p) < 2 )
+    if( *p + 2 > end )
     {
-        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message "
-                                    "(psk_identity_hint length)" ) );
-        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
+        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
+        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
     }
-    len = (*p)[0] << 8 | (*p)[1];
+
+    n = ( (*p)[0] << 8 ) | (*p)[1];
     *p += 2;
 
-    if( end - (*p) < (int) len )
+    if (n == 0)
     {
-        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message "
-                                    "(psk_identity_hint length)" ) );
-        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
+        return ( 0 );
     }
 
-    /*
-     * Note: we currently ignore the PKS identity hint, as we only allow one
-     * PSK to be provisionned on the client. This could be changed later if
-     * someone needs that feature.
-     */
-    *p += len;
-    ret = 0;
+    if( n < 1 || n > 65535 || *p + n > end )
+    {
+        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
+        return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE );
+    }
 
-    return( ret );
+    if( ssl->conf->f_psk != NULL )
+    {
+        if( ssl->conf->f_psk( ssl->conf->p_psk, ssl, *p, n ) != 0 )
+            ret = MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY;
+    }
+    else
+    {
+        /* Identity is not a big secret since clients send it in the clear,
+         * but treat it carefully anyway, just in case */
+        if( n != ssl->conf->psk_identity_len ||
+            mbedtls_ssl_safer_memcmp( ssl->conf->psk_identity, *p, n ) != 0 )
+        {
+            ret = MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY;
+        }
+    }
+
+    if( ret == MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY )
+    {
+        MBEDTLS_SSL_DEBUG_BUF( 3, "Unknown PSK identity", *p, n );
+        if( ( ret = mbedtls_ssl_send_alert_message( ssl,
+                              MBEDTLS_SSL_ALERT_LEVEL_FATAL,
+                              MBEDTLS_SSL_ALERT_MSG_UNKNOWN_PSK_IDENTITY ) ) != 0 )
+        {
+            return( ret );
+        }
+
+        return( MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY );
+    }
+
+    *p += n;
+
+    return( 0 );
 }
 #endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
 
diff --git a/library/ssl_srv.c b/library/ssl_srv.c
index 520051c..548f6cb 100644
--- a/library/ssl_srv.c
+++ b/library/ssl_srv.c
@@ -2961,8 +2961,10 @@ static int ssl_prepare_server_key_exchange( mbedtls_ssl_context *ssl,
     if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
         ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )
     {
-        ssl->out_msg[ssl->out_msglen++] = 0x00;
-        ssl->out_msg[ssl->out_msglen++] = 0x00;
+        ssl->out_msg[ssl->out_msglen++] = (unsigned char)( ssl->conf->psk_identity_len >> 8 );
+        ssl->out_msg[ssl->out_msglen++] = (unsigned char)( ssl->conf->psk_identity_len      );
+        memcpy(ssl->out_msg+ssl->out_msglen, ssl->conf->psk_identity, ssl->conf->psk_identity_len);
+        ssl->out_msg[ssl->out_msglen] += ssl->conf->psk_identity_len;
     }
 #endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED ||
           MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */
@@ -3270,98 +3272,223 @@ curve_matching_done:
 static int ssl_write_server_key_exchange( mbedtls_ssl_context *ssl )
 {
     int ret;
-    size_t signature_len = 0;
-#if defined(MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED)
+    size_t n = 0;
     const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
                             ssl->transform_negotiate->ciphersuite_info;
-#endif /* MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED */
 
-    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write server key exchange" ) );
+    if (ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK)
+    {
+#if defined(MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED) ||                       \
+    defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED) ||                       \
+    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED) ||                     \
+    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED) ||                     \
+    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED) ||                   \
+    defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
+        unsigned char *p = ssl->out_msg + 4;
+        size_t len;
+#endif /* MBEDTLS_KEY_EXCHANGE__SOME_PFS__ENABLED */
+
+        MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write server key exchange" ) );
 
+        /* Key exchanges not involving ephemeral keys don't use
+         * ServerKeyExchange, so end here. */
 #if defined(MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED)
-    /* Extract static ECDH parameters and abort if ServerKeyExchange
-     * is not needed. */
-    if( mbedtls_ssl_ciphersuite_no_pfs( ciphersuite_info ) )
-    {
-        /* For suites involving ECDH, extract DH parameters
-         * from certificate at this point. */
-#if defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED)
-        if( mbedtls_ssl_ciphersuite_uses_ecdh( ciphersuite_info ) )
+        if( mbedtls_ssl_ciphersuite_no_pfs( ciphersuite_info ) )
         {
-            ssl_get_ecdh_params_from_cert( ssl );
+            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write server key exchange" ) );
+            ssl->state++;
+            return( 0 );
         }
-#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED */
+#endif /* MBEDTLS_KEY_EXCHANGE__NON_PFS__ENABLED */
 
-        /* Key exchanges not involving ephemeral keys don't use
-         * ServerKeyExchange, so end here. */
-        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write server key exchange" ) );
+        /*
+         *
+         * Part 2: Provide key exchange parameters for chosen ciphersuite.
+         *
+         */
+
+        /*
+         * For (EC)DHE key exchanges with PSK, parameters are prefixed by support
+         * identity hint (RFC 4279, Sec. 3). Until someone needs this feature,
+         * we use empty support identity hints here.
+         **/
+#if defined(MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED)   || \
+    defined(MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED)
+        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
+            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK )
+        {
+            *(p++) = (unsigned char)( ssl->conf->psk_identity_len >> 8 );
+            *(p++) = (unsigned char)( ssl->conf->psk_identity_len      );
+            memcpy(p, ssl->conf->psk_identity, ssl->conf->psk_identity_len);
+            p += ssl->conf->psk_identity_len;
+            n += ssl->conf->psk_identity_len + 2;
+        }
+#endif /* MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED ||
+          MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED */
+
+        /*
+         * - ECDHE key exchanges
+         */
+#if defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED)
+        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
+            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||
+            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK)
+        {
+            /*
+             * Ephemeral ECDH parameters:
+             *
+             * struct {
+             *     ECParameters curve_params;
+             *     ECPoint      public;
+             * } ServerECDHParams;
+             */
+            const mbedtls_ecp_curve_info **curve = NULL;
+            const mbedtls_ecp_group_id *gid;
+
+            /* Match our preference list against the offered curves */
+            for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
+                for( curve = ssl->handshake->curves; *curve != NULL; curve++ )
+                    if( (*curve)->grp_id == *gid )
+                        goto curve_matching_done;
+
+curve_matching_done:
+            if( curve == NULL || *curve == NULL )
+            {
+                MBEDTLS_SSL_DEBUG_MSG( 1, ( "no matching curve for ECDHE" ) );
+                return( MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN );
+            }
+
+            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ECDHE curve: %s", (*curve)->name ) );
+
+            if( ( ret = mbedtls_ecp_group_load( &ssl->handshake->ecdh_ctx.grp,
+                                           (*curve)->grp_id ) ) != 0 )
+            {
+                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecp_group_load", ret );
+                return( ret );
+            }
+
+            if( ( ret = mbedtls_ecdh_make_params( &ssl->handshake->ecdh_ctx, &len,
+                                          p, /*ssl->out.max_content_len*/MBEDTLS_SSL_OUT_CONTENT_LEN - n,
+                                          ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
+            {
+                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_make_params", ret );
+                return( ret );
+            }
+
+            p += len;
+            n += len;
+
+            MBEDTLS_SSL_DEBUG_ECP( 3, "ECDH: Q ", &ssl->handshake->ecdh_ctx.Q );
+        }
+#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED */
+
+        /* Done with actual work; add header and send. */
+
+        ssl->out_msglen  = 4 + n;
+        ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
+        ssl->out_msg[0]  = MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE;
         ssl->state++;
-        return( 0 );
-    }
-#endif /* MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED */
 
-#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED) && \
-    defined(MBEDTLS_SSL_ASYNC_PRIVATE)
-    /* If we have already prepared the message and there is an ongoing
-     * signature operation, resume signing. */
-    if( ssl->handshake->async_in_progress != 0 )
-    {
-        MBEDTLS_SSL_DEBUG_MSG( 2, ( "resuming signature operation" ) );
-        ret = ssl_resume_server_key_exchange( ssl, &signature_len );
+        if( ( ret = /*mbedtls_ssl_write_record*/mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
+        {
+            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
+            return( ret );
+        }
+        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write server key exchange" ) );
+
+        return( 0 );
     }
     else
-#endif /* defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED) &&
-          defined(MBEDTLS_SSL_ASYNC_PRIVATE) */
     {
-        /* ServerKeyExchange is needed. Prepare the message. */
-        ret = ssl_prepare_server_key_exchange( ssl, &signature_len );
-    }
+        size_t signature_len = 0;
 
-    if( ret != 0 )
-    {
-        /* If we're starting to write a new message, set ssl->out_msglen
-         * to 0. But if we're resuming after an asynchronous message,
-         * out_msglen is the amount of data written so far and mst be
-         * preserved. */
-        if( ret == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS )
-            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write server key exchange (pending)" ) );
+        MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write server key exchange" ) );
+
+#if defined(MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED)
+        // Extract static ECDH parameters and abort if ServerKeyExchange
+        // is not needed.
+        if( mbedtls_ssl_ciphersuite_no_pfs( ciphersuite_info ) )
+        {
+            // For suites involving ECDH, extract DH parameters
+            // from certificate at this point.
+#if defined(MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED)
+            if( mbedtls_ssl_ciphersuite_uses_ecdh( ciphersuite_info ) )
+            {
+                ssl_get_ecdh_params_from_cert( ssl );
+            }
+#endif // MBEDTLS_KEY_EXCHANGE__SOME__ECDH_ENABLED
+
+            // Key exchanges not involving ephemeral keys don't use
+            // ServerKeyExchange, so end here.
+            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write server key exchange" ) );
+            ssl->state++;
+            return( 0 );
+        }
+#endif // MBEDTLS_KEY_EXCHANGE__SOME_NON_PFS__ENABLED
+
+#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED) && \
+    defined(MBEDTLS_SSL_ASYNC_PRIVATE)
+        // If we have already prepared the message and there is an ongoing
+        // signature operation, resume signing.
+        if( ssl->handshake->async_in_progress != 0 )
+        {
+            MBEDTLS_SSL_DEBUG_MSG( 2, ( "resuming signature operation" ) );
+            ret = ssl_resume_server_key_exchange( ssl, &signature_len );
+        }
         else
-            ssl->out_msglen = 0;
-        return( ret );
-    }
+#endif // defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED) &&
+           // defined(MBEDTLS_SSL_ASYNC_PRIVATE)
+        {
+            // ServerKeyExchange is needed. Prepare the message.
+            ret = ssl_prepare_server_key_exchange( ssl, &signature_len );
+        }
+
+        if( ret != 0 )
+        {
+            // If we're starting to write a new message, set ssl->out_msglen
+            // to 0. But if we're resuming after an asynchronous message,
+            // out_msglen is the amount of data written so far and mst be
+            // preserved.
+            if( ret == MBEDTLS_ERR_SSL_ASYNC_IN_PROGRESS )
+                MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write server key exchange (pending)" ) );
+            else
+                ssl->out_msglen = 0;
+            return( ret );
+        }
 
-    /* If there is a signature, write its length.
-     * ssl_prepare_server_key_exchange already wrote the signature
-     * itself at its proper place in the output buffer. */
+        // If there is a signature, write its length.
+        // ssl_prepare_server_key_exchange already wrote the signature
+        // itself at its proper place in the output buffer.
 #if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
-    if( signature_len != 0 )
-    {
-        ssl->out_msg[ssl->out_msglen++] = (unsigned char)( signature_len >> 8 );
-        ssl->out_msg[ssl->out_msglen++] = (unsigned char)( signature_len      );
+        if( signature_len != 0 )
+        {
+            ssl->out_msg[ssl->out_msglen++] = (unsigned char)( signature_len >> 8 );
+            ssl->out_msg[ssl->out_msglen++] = (unsigned char)( signature_len      );
 
-        MBEDTLS_SSL_DEBUG_BUF( 3, "my signature",
-                               ssl->out_msg + ssl->out_msglen,
-                               signature_len );
+            MBEDTLS_SSL_DEBUG_BUF( 3, "my signature",
+                                   ssl->out_msg + ssl->out_msglen,
+                                   signature_len );
 
-        /* Skip over the already-written signature */
-        ssl->out_msglen += signature_len;
-    }
-#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */
+            // Skip over the already-written signature
+            ssl->out_msglen += signature_len;
+        }
+#endif // MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED
 
-    /* Add header and send. */
-    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
-    ssl->out_msg[0]  = MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE;
+        // Add header and send.
+        ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
+        ssl->out_msg[0]  = MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE;
 
-    ssl->state++;
+        ssl->state++;
 
-    if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
-    {
-        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
-        return( ret );
-    }
+        if( ( ret = mbedtls_ssl_write_handshake_msg( ssl ) ) != 0 )
+        {
+            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_handshake_msg", ret );
+            return( ret );
+        }
 
-    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write server key exchange" ) );
-    return( 0 );
+        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write server key exchange" ) );
+        return( 0 );
+    }
 }
 
 static int ssl_write_server_hello_done( mbedtls_ssl_context *ssl )
-- 
1.9.1

