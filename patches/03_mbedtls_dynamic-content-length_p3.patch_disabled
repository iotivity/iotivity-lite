From fa3ad0c729dae88e330f5f8d1b94487c8aeb1e6c Mon Sep 17 00:00:00 2001
From: Andy Green <andy@warmcat.com>
Date: Tue, 12 Dec 2017 13:38:10 +0800
Subject: [PATCH 3/6] dynamic content length: mbedtls_ssl_confirm_content_len

This patch introduces mbedtls_ssl_confirm_content_len(), which
ensures that either the in or out record buffer is at least as
large enough for the given size.  If necessary, the buffer is
reallocated.

Length checks are preceded by calls to mbedtls_ssl_confirm_content_len()
attempting to resize the buffer being checked such that the check
will always pass.

mbedtls_ssl_confirm_content_len() will limit the allocation to 16384 +
the overhead constant if asked to allocate anything larger than 16384.

Initially, the buffer size is zero.

The in and out buffer sizes are handled separately.

The effect of this is to make the buffers dynamically "stretchy", such
that initially too small buffers simply adapt instead of fail out as
before.

For the test client, instead of a buffer allocation of 32KB + the overhead,
the client side only requires an allocation of 6625 bytes (1933 out and
4692 in).

Signed-off-by: Andy Green <andy@warmcat.com>
---
 include/mbedtls/ssl.h                |   9 +--
 include/mbedtls/ssl_internal.h       |   4 +-
 library/ssl_cli.c                    |  34 +++++---
 library/ssl_srv.c                    |  35 +++++++-
 library/ssl_tls.c                    | 151 +++++++++++++++++++++++++----------
 tests/suites/test_suite_ssl.function |   6 ++
 6 files changed, 182 insertions(+), 57 deletions(-)

diff --git a/include/mbedtls/ssl.h b/include/mbedtls/ssl.h
index abacad3..db07bf0 100644
--- a/include/mbedtls/ssl.h
+++ b/include/mbedtls/ssl.h
@@ -222,12 +222,9 @@
  * Maxium fragment length in bytes,
  * determines the size of each of the two internal I/O buffers.
  *
- * Note: the RFC defines the default size of SSL / TLS messages. If you
- * change the value here, other clients / servers may not be able to
- * communicate with you anymore. Only change this value if you control
- * both sides of the connection and have it reduced at both sides, or
- * if you're using the Max Fragment Length extension and you know all your
- * peers are using it too!
+ * If you set this to less than 16384, mbedTLS will initially size the
+ * buffers to the value given, and if it finds something larger is
+ * necessary, it will reallocate the buffer.  This involves a memcpy.
  */
 #if !defined(MBEDTLS_SSL_MAX_CONTENT_LEN)
 #define MBEDTLS_SSL_MAX_CONTENT_LEN         16384   /**< Size of the input / output buffer */
diff --git a/include/mbedtls/ssl_internal.h b/include/mbedtls/ssl_internal.h
index 8aee37b..203b0e5 100644
--- a/include/mbedtls/ssl_internal.h
+++ b/include/mbedtls/ssl_internal.h
@@ -627,7 +627,9 @@ void mbedtls_ssl_dtls_replay_update( mbedtls_ssl_context *ssl );
 int mbedtls_ssl_alloc_record_buf( mbedtls_ssl_context *ssl,
                                   mbedtls_ssl_record *rec,
                                   size_t max_content_len );
-
+int mbedtls_ssl_confirm_content_len( mbedtls_ssl_context *ssl,
+                                     mbedtls_ssl_record *rec,
+                                     size_t content_len );
 /* constant-time buffer comparison */
 static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
 {
diff --git a/library/ssl_cli.c b/library/ssl_cli.c
index 92a9555..d83bb51 100644
--- a/library/ssl_cli.c
+++ b/library/ssl_cli.c
@@ -73,6 +73,10 @@ static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
 
     hostname_len = strlen( ssl->hostname );
 
+    if( mbedtls_ssl_confirm_content_len( ssl, &ssl->out, buf - ssl->out.buf  +
+                                           hostname_len + 9 ) )
+        return;
+
     if( end < p || (size_t)( end - p ) < hostname_len + 9 )
     {
         MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
@@ -442,7 +446,7 @@ static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                                size_t *olen )
 {
     unsigned char *p = buf;
-    const unsigned char *end = ssl->out.msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
+    const unsigned char *end = ssl->out.msg + ssl->out.max_content_len;
 
     *olen = 0;
 
@@ -720,7 +724,7 @@ static int ssl_generate_random( mbedtls_ssl_context *ssl )
 static int ssl_write_client_hello( mbedtls_ssl_context *ssl )
 {
     int ret;
-    size_t i, n, olen, ext_len = 0;
+    size_t i, n, olen, ext_len = 0, pofs;
     unsigned char *buf;
     unsigned char *p, *q;
     unsigned char offer_compress;
@@ -750,6 +754,10 @@ static int ssl_write_client_hello( mbedtls_ssl_context *ssl )
         return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
     }
 
+    ret = mbedtls_ssl_confirm_content_len( ssl, &ssl->out, MBEDTLS_SSL_BUFFER_MIN + 1024 );
+    if( ret )
+        return( ret );
+
     /*
      *     0  .   0   handshake type
      *     1  .   3   handshake length
@@ -967,6 +975,8 @@ static int ssl_write_client_hello( mbedtls_ssl_context *ssl )
         *p++ = MBEDTLS_SSL_COMPRESS_NULL;
     }
 
+    pofs = p - ssl->out.buf;
+
     // First write extensions, then the total length
     //
 #if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
@@ -989,9 +999,10 @@ static int ssl_write_client_hello( mbedtls_ssl_context *ssl )
 
 #if defined(MBEDTLS_ECDH_C) || defined(MBEDTLS_ECDSA_C) || \
     defined(MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED)
+    /* 6 bytes per */
     ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
     ext_len += olen;
-
+    /* 6 bytes per */
     ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
     ext_len += olen;
 #endif
@@ -1025,14 +1036,19 @@ static int ssl_write_client_hello( mbedtls_ssl_context *ssl )
     ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
     ext_len += olen;
 #endif
-
 #if defined(MBEDTLS_SSL_SESSION_TICKETS)
+    ret = mbedtls_ssl_confirm_content_len( ssl, &ssl->out, pofs + 2 + ext_len +
+               ssl->session_negotiate->ticket_len + 4 + 3 );
+    if( ret )
+        return ret;
+    p = ssl->out.buf + pofs;
     ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
     ext_len += olen;
 #endif
 
-    /* olen unused if all extensions are disabled */
+    /* unused if all extensions are disabled */
     ((void) olen);
+    ((void) pofs);
 
     MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                    ext_len ) );
@@ -1044,7 +1060,7 @@ static int ssl_write_client_hello( mbedtls_ssl_context *ssl )
         p += ext_len;
     }
 
-    ssl->out.msglen  = p - buf;
+    ssl->out.msglen  = p - ssl->out.msg;
     ssl->out.msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
     ssl->out.msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 
@@ -1456,8 +1472,6 @@ static int ssl_parse_server_hello( mbedtls_ssl_context *ssl )
 
     MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );
 
-    buf = ssl->in.msg;
-
     if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
     {
         /* No alert on a read error. */
@@ -1493,6 +1507,8 @@ static int ssl_parse_server_hello( mbedtls_ssl_context *ssl )
         return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
     }
 
+    buf = ssl->in.msg;
+
 #if defined(MBEDTLS_SSL_PROTO_DTLS)
     if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
     {
@@ -1532,7 +1548,7 @@ static int ssl_parse_server_hello( mbedtls_ssl_context *ssl )
      * 38+n . 39+n  extensions length (optional)
      * 40+n .  ..   extensions
      */
-    buf += mbedtls_ssl_hs_hdr_len( ssl );
+    buf = ssl->in.msg + mbedtls_ssl_hs_hdr_len( ssl );
 
     MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
     mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
diff --git a/library/ssl_srv.c b/library/ssl_srv.c
index 2c576b9..7ebe567 100644
--- a/library/ssl_srv.c
+++ b/library/ssl_srv.c
@@ -1265,6 +1265,10 @@ read_record_header:
         return( MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO );
     }
 
+    ret = mbedtls_ssl_confirm_content_len( ssl, &ssl->out, MBEDTLS_SSL_BUFFER_MIN);
+    if( ret )
+        return( ret );
+
     /* For DTLS if this is the initial handshake, remember the client sequence
      * number to use it in our next message (RFC 6347 4.2.1) */
 #if defined(MBEDTLS_SSL_PROTO_DTLS)
@@ -2387,6 +2391,10 @@ static int ssl_write_server_hello( mbedtls_ssl_context *ssl )
     size_t olen, ext_len = 0, n;
     unsigned char *buf, *p;
 
+    ret = mbedtls_ssl_confirm_content_len( ssl, &ssl->out, MBEDTLS_SSL_BUFFER_MIN + 1024 );
+    if( ret )
+        return( ret );
+
     MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write server hello" ) );
 
 #if defined(MBEDTLS_SSL_DTLS_HELLO_VERIFY)
@@ -3171,8 +3179,16 @@ curve_matching_done:
             n += 2;
         }
 #endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
+	len = p - ssl->out.buf;
+        ret = mbedtls_ssl_confirm_content_len( ssl, &ssl->out,
+                                               ( p + 4 - ssl->out.buf ) +
+                                               mbedtls_pk_get_len(
+						     mbedtls_ssl_own_key( ssl ) ) );
+        if( ret )
+            return( ret );
+	p = ssl->out.buf + len;
 
-        if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash, hashlen,
+	if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash, hashlen,
                         p + 2 , &signature_len, ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
         {
             MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
@@ -3912,6 +3928,23 @@ static int ssl_write_new_session_ticket( mbedtls_ssl_context *ssl )
 
     MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write new session ticket" ) );
 
+    if( ssl && ssl->session_negotiate && ssl->session_negotiate->peer_cert ) {
+        /*
+	 * We need enough space to cover:
+	 *
+	 *  - the peer cert itself
+	 *  - at least 4 bytes for key_name, 12 for IV, 2 for len, 16 for tag
+	 *  - 10 for the header
+	 *  - the gap between the buffer and message start
+	 *  - the session struct
+	 */
+        ret = mbedtls_ssl_confirm_content_len( ssl, &ssl->out,
+            ssl->session_negotiate->peer_cert->raw.len + 4 + 12 + 2 + 16 + 10 +
+	        (ssl->out.msg - ssl->out.buf) + sizeof( mbedtls_ssl_session ) );
+        if( ret )
+            return( ret );
+    }
+
     ssl->out.msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
     ssl->out.msg[0]  = MBEDTLS_SSL_HS_NEW_SESSION_TICKET;
 
diff --git a/library/ssl_tls.c b/library/ssl_tls.c
index 51c12d5..3443553 100644
--- a/library/ssl_tls.c
+++ b/library/ssl_tls.c
@@ -2110,7 +2110,8 @@ static int ssl_compress_buf( mbedtls_ssl_context *ssl )
     ssl->transform_out->ctx_deflate.next_in = msg_pre;
     ssl->transform_out->ctx_deflate.avail_in = len_pre;
     ssl->transform_out->ctx_deflate.next_out = msg_post;
-    ssl->transform_out->ctx_deflate.avail_out = MBEDTLS_SSL_BUFFER_LEN;
+    ssl->transform_out->ctx_deflate.avail_out = ssl->out.max_content_len + MBEDTLS_SSL_BUFFER_OVERHEAD -
+                                                  (ssl->out.msg - ssl->out.buf);
 
     ret = deflate( &ssl->transform_out->ctx_deflate, Z_SYNC_FLUSH );
     if( ret != Z_OK )
@@ -2156,8 +2157,9 @@ static int ssl_decompress_buf( mbedtls_ssl_context *ssl )
     ssl->transform_in->ctx_inflate.next_in = msg_pre;
     ssl->transform_in->ctx_inflate.avail_in = len_pre;
     ssl->transform_in->ctx_inflate.next_out = msg_post;
-    ssl->transform_in->ctx_inflate.avail_out = ssl->out.max_content_len +
-                                                MBEDTLS_SSL_BUFFER_OVERHEAD;
+    ssl->transform_in->ctx_inflate.avail_out = ssl->in.max_content_len +
+                                                MBEDTLS_SSL_BUFFER_OVERHEAD -
+						 (ssl->in.msg - ssl->in.buf);
 
     ret = inflate( &ssl->transform_in->ctx_inflate, Z_SYNC_FLUSH );
     if( ret != Z_OK )
@@ -2241,6 +2243,11 @@ int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
         return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
     }
 
+    ret = mbedtls_ssl_confirm_content_len( ssl, &ssl->in, nb_want +
+		              (size_t)( ssl->in.hdr - ssl->in.buf ) + 1024 );
+    if( ret )
+	    return( ret );
+
     if( nb_want > ssl->in.max_content_len + MBEDTLS_SSL_BUFFER_OVERHEAD -
                   (size_t)( ssl->in.hdr - ssl->in.buf ) )
     {
@@ -2398,6 +2405,11 @@ int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
         {
             len = nb_want - ssl->in.left;
 
+            ret = mbedtls_ssl_confirm_content_len( ssl, &ssl->in, ssl->in.left + len );
+            if( ret )
+	            return( ret );
+
+
             if( ssl_check_timer( ssl ) != 0 )
                 ret = MBEDTLS_ERR_SSL_TIMEOUT;
             else
@@ -2848,6 +2860,11 @@ int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
 #endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
     if( !done )
     {
+        ret = mbedtls_ssl_confirm_content_len( ssl, &ssl->out, ssl->out.msglen +
+					       mbedtls_ssl_hdr_len( ssl ));
+        if( ret )
+	        return( ret );
+
         ssl->out.hdr[0] = (unsigned char) ssl->out.msgtype;
         mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                            ssl->conf->transport, ssl->out.hdr + 1 );
@@ -2965,6 +2982,8 @@ static int ssl_reassemble_dtls_handshake( mbedtls_ssl_context *ssl )
     unsigned char *msg, *bitmask;
     size_t frag_len, frag_off;
     size_t msg_len = ssl->in_hslen - 12; /* Without headers */
+    size_t required;
+    int ret;
 
     if( ssl->handshake == NULL )
     {
@@ -2982,6 +3001,10 @@ static int ssl_reassemble_dtls_handshake( mbedtls_ssl_context *ssl )
         MBEDTLS_SSL_DEBUG_MSG( 2, ( "initialize reassembly, total length = %d",
                             msg_len ) );
 
+        ret = mbedtls_ssl_confirm_content_len( ssl, &ssl->in, ssl->in_hslen);
+        if( ret )
+	        return( ret );
+
         if( ssl->in_hslen > ssl->in.max_content_len )
         {
             MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too large" ) );
@@ -3086,8 +3109,13 @@ static int ssl_reassemble_dtls_handshake( mbedtls_ssl_context *ssl )
         ssl->next_record_offset = new_remain - ssl->in.hdr;
         ssl->in.left = ssl->next_record_offset + remain_len;
 
-        if( ssl->in.left > ssl->in.max_content_len + MBEDTLS_SSL_BUFFER_OVERHEAD -
-                           (size_t)( ssl->in.hdr - ssl->in.buf ) )
+        required = ssl->in.left + (size_t)( ssl->in.hdr - ssl->in.buf );
+
+        ret = mbedtls_ssl_confirm_content_len( ssl, &ssl->in, required );
+        if( ret )
+	        return( ret );
+
+        if( required > (size_t)(ssl->in.max_content_len + MBEDTLS_SSL_BUFFER_OVERHEAD) )
         {
             MBEDTLS_SSL_DEBUG_MSG( 1, ( "reassembled message too large for buffer" ) );
             return( MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL );
@@ -3186,7 +3214,7 @@ int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
     /* With TLS we don't handle fragmentation (for now) */
     if( ssl->in.msglen < ssl->in_hslen )
     {
-        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
+        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported (msglen %d, in_hslen %d)", ssl->in.msglen, ssl->in_hslen ) );
         return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
     }
 
@@ -3511,7 +3539,7 @@ static int ssl_handle_possible_reconnect( mbedtls_ssl_context *ssl )
  */
 static int ssl_parse_record_header( mbedtls_ssl_context *ssl )
 {
-    int major_ver, minor_ver;
+    int major_ver, minor_ver, ret;
 
     MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in.hdr, mbedtls_ssl_hdr_len( ssl ) );
 
@@ -3556,21 +3584,18 @@ static int ssl_parse_record_header( mbedtls_ssl_context *ssl )
         return( MBEDTLS_ERR_SSL_INVALID_RECORD );
     }
 
-    /* Check length against the size of our buffer */
-    if( ssl->in.msglen > ssl->in.max_content_len + MBEDTLS_SSL_BUFFER_OVERHEAD
-                         - (size_t)( ssl->in.msg - ssl->in.buf ) )
-    {
-        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
-        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
-    }
+    ret = mbedtls_ssl_confirm_content_len( ssl, &ssl->in,
+                                           (size_t)( ssl->in.msg - ssl->in.buf ) + ssl->in.msglen );
+    if( ret )
+	    return( ret );
 
     /* Check length against bounds of the current transform and version */
     if( ssl->transform_in == NULL )
     {
         if( ssl->in.msglen < 1 ||
-            ssl->in.msglen > ssl->in.max_content_len )
+            ssl->in.msglen > (size_t)(ssl->in.max_content_len + MBEDTLS_SSL_BUFFER_OVERHEAD) )
         {
-            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
+            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length %d vs %d ", ssl->in.msglen, ssl->in.max_content_len ) );
             return( MBEDTLS_ERR_SSL_INVALID_RECORD );
         }
     }
@@ -4313,7 +4338,13 @@ int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
     while( crt != NULL )
     {
         n = crt->raw.len;
-        if( n > ssl->out.max_content_len - 3 - i )
+
+        ret = mbedtls_ssl_confirm_content_len( ssl, &ssl->out,
+                                               n + 3 + i);
+        if( ret )
+                return( ret );
+
+        if( n > ssl->out.max_content_len + MBEDTLS_SSL_BUFFER_OVERHEAD - 3 - i )
         {
             MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                            i + 3 + n, ssl->out.max_content_len ) );
@@ -5657,7 +5688,7 @@ void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
  * non-null ssl->*buf
  */
 int mbedtls_ssl_alloc_record_buf( mbedtls_ssl_context *ssl,
-		                  mbedtls_ssl_record *rec,
+		                          mbedtls_ssl_record *rec,
                                   size_t max_content_len )
 {
     size_t len, min;
@@ -5679,6 +5710,7 @@ int mbedtls_ssl_alloc_record_buf( mbedtls_ssl_context *ssl,
 
     buf = mbedtls_calloc( 1, len );
     if( !buf ) {
+        MBEDTLS_SSL_DEBUG_MSG( 2, ( "%s: alloc of %lu failed", __func__, (long)len ) );
         return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
     }
 
@@ -5687,36 +5719,44 @@ int mbedtls_ssl_alloc_record_buf( mbedtls_ssl_context *ssl,
 	    /* if offt is in use, also fix it up */
 	    if (rec->offt)
 		    rec->offt = (rec->offt - rec->buf) + buf;
-            mbedtls_zeroize(rec->buf, rec->max_content_len + MBEDTLS_SSL_BUFFER_OVERHEAD);
+        mbedtls_zeroize(rec->buf, rec->max_content_len + MBEDTLS_SSL_BUFFER_OVERHEAD);
 	    mbedtls_free(rec->buf);
     }
-    MBEDTLS_SSL_DEBUG_MSG( 2, ( "%s: realloc %s: %u -> %u\n", __func__,
+    MBEDTLS_SSL_DEBUG_MSG( 2, ( "%s: realloc %s: %u -> (%u + %u)\n", __func__,
 			   rec == &ssl->in ? "in" : "out",
 			   (unsigned int)rec->max_content_len,
-			   (unsigned int)max_content_len ) );
-
-    rec->buf = buf;
-    rec->max_content_len = max_content_len;
+			   (unsigned int)max_content_len, MBEDTLS_SSL_BUFFER_OVERHEAD ) );
 
+    if( !rec->buf ) {
 #if defined(MBEDTLS_SSL_PROTO_DTLS)
-    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
-    {
-        rec->hdr = buf;
-        rec->ctr = buf +  3;
-        rec->len = buf + 11;
-        rec->iv  = buf + 13;
-        rec->msg = buf + 13;
-    }
-    else
+        if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
+        {
+            rec->hdr = buf;
+            rec->ctr = buf +  3;
+            rec->len = buf + 11;
+            rec->iv  = buf + 13;
+            rec->msg = buf + 13;
+        }
+        else
 #endif
-    {
-        rec->ctr = buf;
-        rec->hdr = buf +  8;
-        rec->len = buf + 11;
-        rec->iv  = buf + 13;
-        rec->msg = buf + 13;
+        {
+            rec->ctr = buf;
+            rec->hdr = buf +  8;
+            rec->len = buf + 11;
+            rec->iv  = buf + 13;
+            rec->msg = buf + 13;
+        }
+    } else {
+        rec->ctr = rec->ctr - rec->buf + buf;
+        rec->hdr = rec->hdr - rec->buf + buf;
+        rec->len = rec->len - rec->buf + buf;
+        rec->iv = rec->iv - rec->buf + buf;
+        rec->msg = rec->msg - rec->buf + buf;
     }
 
+    rec->buf = buf;
+    rec->max_content_len = max_content_len;
+
     return( 0 );
 }
 
@@ -5737,6 +5777,30 @@ int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
 }
 
 /*
+ * if content_len is bigger than the existing buffer can
+ * handle, grow it.
+ *
+ * Notice that the amount actually allocated is content_len +
+ * MBEDTLS_SSL_BUFFER_OVERHEAD.  rec->max_content_len is
+ * set to the length without MBEDTLS_SSL_BUFFER_OVERHEAD.
+ */
+int mbedtls_ssl_confirm_content_len( mbedtls_ssl_context *ssl,
+                                     mbedtls_ssl_record *rec,
+                                     size_t content_len )
+{
+    if( content_len > MBEDTLS_SSL_MAX_CONTENT_LEN )
+	    content_len = MBEDTLS_SSL_MAX_CONTENT_LEN;
+
+    if( rec->buf &&
+        content_len <= (size_t)rec->max_content_len )
+	    return( 0 );
+
+    /* we have to either create or expand the buffer to cope with this... */
+
+    return( mbedtls_ssl_alloc_record_buf(ssl, rec, content_len ) );
+}
+
+/*
  * Reset an initialized and used SSL context for re-use while retaining
  * all application-set variables, function pointers and data.
  *
@@ -6868,10 +6932,13 @@ int mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len )
 {
     int ret;
     size_t n;
-
     if( ssl == NULL || ssl->conf == NULL )
         return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 
+    ret = mbedtls_ssl_confirm_content_len( ssl, &ssl->in, ssl->in.msglen );
+    if( ret )
+	    return( ret );
+
     MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read" ) );
 
 #if defined(MBEDTLS_SSL_PROTO_DTLS)
@@ -7296,6 +7363,10 @@ int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_
         }
     }
 
+    ret = mbedtls_ssl_confirm_content_len( ssl, &ssl->out, len );
+    if( ret )
+        return( ret );
+
 #if defined(MBEDTLS_SSL_CBC_RECORD_SPLITTING)
     ret = ssl_write_split( ssl, buf, len );
 #else
diff --git a/tests/suites/test_suite_ssl.function b/tests/suites/test_suite_ssl.function
index 61799c3..3954dcd 100644
--- a/tests/suites/test_suite_ssl.function
+++ b/tests/suites/test_suite_ssl.function
@@ -24,6 +24,12 @@ void ssl_dtls_replay( char *prevs, char *new, int ret )
                  MBEDTLS_SSL_PRESET_DEFAULT ) == 0 );
     TEST_ASSERT( mbedtls_ssl_setup( &ssl, &conf ) == 0 );
 
+    /* allocation for the ssl buffers is normally deferred until
+     * first use.  For the test, force an allocation of the in
+     * buffer.
+     */
+    TEST_ASSERT( mbedtls_ssl_confirm_content_len( &ssl, &ssl.in, 1024) == 0 );
+
     /* Read previous record numbers */
     for( ; end_prevs - prevs >= 13; prevs += 13 )
     {
-- 
1.9.1

