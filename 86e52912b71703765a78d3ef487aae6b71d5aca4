{
  "comments": [
    {
      "key": {
        "uuid": "9a3d3df0_dc647ce7",
        "filename": "api/oc_client_api.c",
        "patchSetId": 4
      },
      "lineNbr": 330,
      "author": {
        "id": 13
      },
      "writtenOn": "2018-11-22T11:36:28Z",
      "side": 1,
      "message": "Session ending by single response fail is too strict considering cloud server may not respond somehow even though spec guide it. It looks better to call the cb-\u003eclient_handler.response(self creating oc_client_response_t) for user handle the error case. For example consecutive two or three time ping/pong no response, then let the application to close connection. Otherwise define one more callback parameter from oc_send_ping(..., timeout_cb)",
      "range": {
        "startLine": 330,
        "startChar": 2,
        "endLine": 330,
        "endChar": 44
      },
      "revId": "86e52912b71703765a78d3ef487aae6b71d5aca4",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_5e31840a",
        "filename": "apps/client_multithread_linux.c",
        "patchSetId": 4
      },
      "lineNbr": 91,
      "author": {
        "id": 475
      },
      "writtenOn": "2018-11-16T11:40:53Z",
      "side": 1,
      "message": "doesn\u0027t it need #ifdef OC_TCP",
      "revId": "86e52912b71703765a78d3ef487aae6b71d5aca4",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_815c5127",
        "filename": "apps/client_multithread_linux.c",
        "patchSetId": 4
      },
      "lineNbr": 91,
      "author": {
        "id": 1225
      },
      "writtenOn": "2018-11-19T06:31:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a3d3df0_5e31840a",
      "revId": "86e52912b71703765a78d3ef487aae6b71d5aca4",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_7e40c856",
        "filename": "messaging/coap/coap.c",
        "patchSetId": 4
      },
      "lineNbr": 346,
      "author": {
        "id": 475
      },
      "writtenOn": "2018-11-16T11:40:53Z",
      "side": 1,
      "message": "I am not sure whether the first param works well or not.\nactually, I think the first param should be identical because it affects options[] of coap_packet_t\n\n\nhowever your definitions of coap_signal_option_t look different, \n\nFor example, COAP_SIGNAL_OPTION_BERT and COAP_SIGNAL_OPTION_HOLD_OFF are \u00274\u0027. in addition, COAP_OPTION_ETAG is \u00274\u0027 too.\n\nall of above enum may access same bit of options[] of coap_packet_t.\n\n\nWould you please check SET_OPTION and IS_OPTION ?",
      "range": {
        "startLine": 346,
        "startChar": 30,
        "endLine": 346,
        "endChar": 62
      },
      "revId": "86e52912b71703765a78d3ef487aae6b71d5aca4",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_e140bd37",
        "filename": "messaging/coap/coap.c",
        "patchSetId": 4
      },
      "lineNbr": 346,
      "author": {
        "id": 1225
      },
      "writtenOn": "2018-11-19T06:31:53Z",
      "side": 1,
      "message": "all option numbers are difined in RFC8323, And these are not overlaped in the same signal packet code.\n\nSo it will not happen what you worrying situation.",
      "parentUuid": "9a3d3df0_7e40c856",
      "range": {
        "startLine": 346,
        "startChar": 30,
        "endLine": 346,
        "endChar": 62
      },
      "revId": "86e52912b71703765a78d3ef487aae6b71d5aca4",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_41d88953",
        "filename": "messaging/coap/coap.c",
        "patchSetId": 4
      },
      "lineNbr": 346,
      "author": {
        "id": 475
      },
      "writtenOn": "2018-11-20T05:48:31Z",
      "side": 1,
      "message": "I bet you use right numbers of signal options  from RFC8323.\n\nAs you understood, my concern is the way referring same position of options[] due to same numbers\n\n\n\nMy concern comes from following sentence\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nRFC8323\n\"5.3.2.  Block-Wise-Transfer Capability Option\"\nimplementation may want to (1) choose a particular BERT block size it wants to encourage and (2) add a delta for the header and any options  that may also need to be included in the message with a BERT block of that size\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nFor example.\ncode is \"CSM_7_01\"\nCOAP_SIGNAL_OPTION_MAX_MSG_SIZE (2) is set\nCOAP_SIGNAL_OPTION_BERT (4) isn\u0027t set\nAND\nCOAP_OPTION_ETAG (4) is set\n\nI think above example will think COAP_SIGNAL_OPTION_BERT is set although it isn\u0027t.\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\n\nif the \u0027options\u0027 described above is not options from RFC7252, I don\u0027t have any discussing point about it.",
      "parentUuid": "9a3d3df0_e140bd37",
      "range": {
        "startLine": 346,
        "startChar": 30,
        "endLine": 346,
        "endChar": 62
      },
      "revId": "86e52912b71703765a78d3ef487aae6b71d5aca4",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_1c5f0410",
        "filename": "messaging/coap/coap.c",
        "patchSetId": 4
      },
      "lineNbr": 612,
      "author": {
        "id": 13
      },
      "writtenOn": "2018-11-22T11:36:28Z",
      "side": 1,
      "message": "How about break the while loop after execution of coap_parse_signal_options(..) then we can remove else { } below. In case of extra option value exist in signal message, coap_parse_signal_options(..) will be executed again in while loop.",
      "range": {
        "startLine": 609,
        "startChar": 0,
        "endLine": 612,
        "endChar": 10
      },
      "revId": "86e52912b71703765a78d3ef487aae6b71d5aca4",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_9caaf4d2",
        "filename": "messaging/coap/coap.c",
        "patchSetId": 4
      },
      "lineNbr": 1354,
      "author": {
        "id": 13
      },
      "writtenOn": "2018-11-22T11:36:28Z",
      "side": 1,
      "message": "How about moving these into coap_signal.c?",
      "range": {
        "startLine": 1197,
        "startChar": 0,
        "endLine": 1354,
        "endChar": 1
      },
      "revId": "86e52912b71703765a78d3ef487aae6b71d5aca4",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_fcaea0e6",
        "filename": "messaging/coap/coap_signal.c",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 13
      },
      "writtenOn": "2018-11-22T11:36:28Z",
      "side": 1,
      "message": "Could you explain why you handle this signal message sending from separate path beyond from dispath_coap_request().",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 24
      },
      "revId": "86e52912b71703765a78d3ef487aae6b71d5aca4",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_9e3b0ceb",
        "filename": "messaging/coap/coap_signal.c",
        "patchSetId": 4
      },
      "lineNbr": 227,
      "author": {
        "id": 475
      },
      "writtenOn": "2018-11-16T11:40:53Z",
      "side": 1,
      "message": "if pong doesn\u0027t need a specific handle,\nhow about remove this \u0027if\u0027?",
      "range": {
        "startLine": 227,
        "startChar": 40,
        "endLine": 227,
        "endChar": 43
      },
      "revId": "86e52912b71703765a78d3ef487aae6b71d5aca4",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_214bc55a",
        "filename": "messaging/coap/coap_signal.c",
        "patchSetId": 4
      },
      "lineNbr": 227,
      "author": {
        "id": 1225
      },
      "writtenOn": "2018-11-19T06:31:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a3d3df0_9e3b0ceb",
      "range": {
        "startLine": 227,
        "startChar": 40,
        "endLine": 227,
        "endChar": 43
      },
      "revId": "86e52912b71703765a78d3ef487aae6b71d5aca4",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_3e364004",
        "filename": "messaging/coap/engine.c",
        "patchSetId": 4
      },
      "lineNbr": 185,
      "author": {
        "id": 475
      },
      "writtenOn": "2018-11-16T11:40:53Z",
      "side": 1,
      "message": "\"#ifdef OC_TCP\" maybe needed",
      "revId": "86e52912b71703765a78d3ef487aae6b71d5aca4",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_0148415a",
        "filename": "messaging/coap/engine.c",
        "patchSetId": 4
      },
      "lineNbr": 185,
      "author": {
        "id": 1225
      },
      "writtenOn": "2018-11-19T06:31:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a3d3df0_3e364004",
      "revId": "86e52912b71703765a78d3ef487aae6b71d5aca4",
      "serverId": "c6509b8a-a471-4ec1-8e5f-9aed2654acb5",
      "unresolved": false
    }
  ]
}