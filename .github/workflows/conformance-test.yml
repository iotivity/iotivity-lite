name: OCF Conformance Test
on:
  pull_request:
    types:
      - opened
      - labeled
  push:
    branches:
      - master
      - main
    tags:
      - "*"
jobs:
  comment:
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          installation_id: 24124545
      - name: Create comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ steps.generate_token.outputs.token }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            :tada: Thank you for your code contribution! To guarantee the change/addition is conformant to the [OCF Specification](https://openconnectivity.org), we would like to ask you to execute OCF Conformance Testing of your change :point_up: **when your work is ready to be reviewed**.
            
            ---

            :information_source: To verify the conformance of your change, label this pull request with the `OCF Conformance Testing` label.

            :warning: Tests are being executed with every new commit. Please unlabel this pull request in case it's not yet ready.
  test:
    if: (github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'OCF Conformance Testing') || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        if: always() && github.event_name == 'workflow_dispatch'
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
          installation_id: 24124545
      - name: Test
        run: python ../../github_run_ci.py --commit ${{steps.commit.outputs.sha}}
      - name: Archive Test Results
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: results/*.octt