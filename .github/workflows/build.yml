# This is a basic workflow to help you get started with Actions

name: CI-building linux

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  make_linux_secured_java:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE,  so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: make secured with Java
        run: |
          # the setup
          sudo apt-get update -y
          sudo apt-get -y install make autoconf swig default-jdk
          swig -version
          java -version
          javac -version
          wget --quiet --output-document=junit-4.13.jar https://search.maven.org/remotecontent?filepath=junit/junit/4.13/junit-4.13.jar
          wget --quiet --output-document=hamcrest-core-1.3.jar https://search.maven.org/remotecontent?filepath=org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar
          # the actual build
          cd port/linux
          make TCP=1 IPV4=1 PKI=1 JAVA=1
          cd ../..
          cd swig/apps/unit_test
          JUNIT4=../../../junit-4.13.jar ./build-unit-tests.sh
          JUNIT4=../../../junit-4.13.jar HAMCREST_CORE=../../../hamcrest-core-1.3.jar ./run-unit-tests.sh
          cd ../..

  make_linux_secured_java_cloud:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE,  so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: make secured with Java
        run: |
          # the setup
          sudo apt-get update -y
          sudo apt-get -y install make autoconf swig default-jdk
          swig -version
          java -version
          javac -version
          wget --quiet --output-document=junit-4.13.jar https://search.maven.org/remotecontent?filepath=junit/junit/4.13/junit-4.13.jar
          wget --quiet --output-document=hamcrest-core-1.3.jar https://search.maven.org/remotecontent?filepath=org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar
          # the actual build
          cd port/linux
          make TCP=1 IPV4=1 CLOUD=1 PKI=1 JAVA=1
          cd ../..
          cd swig/apps/unit_test
          JUNIT4=../../../junit-4.13.jar ./build-unit-tests.sh
          JUNIT4=../../../junit-4.13.jar HAMCREST_CORE=../../../hamcrest-core-1.3.jar ./run-unit-tests.sh
          cd ../..

  make_otgc_linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE,  so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: make secured with Java
        run: |
          # the setup
          #sudo apt-get -y install make autoconf swig default-jdk
          #swig -version
          #java -version
          #javac -version
          #wget --quiet --output-document=junit-4.13.jar https://search.maven.org/remotecontent?filepath=junit/junit/4.13/junit-4.13.jar
          #wget --quiet --output-document=hamcrest-core-1.3.jar https://search.maven.org/remotecontent?filepath=org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar
          # the actual build
          cd port/linux
          make DEBUG=1 SECURE=1 IPV4=1 TCP=1 PKI=1 DYNAMIC=1 CLOUD=1 JAVA=1 IDD=1

  build_esp32:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE,  so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: "true"

      # Runs a set of commands using the runners shell
      - name: build esp32
        run: |
          sudo apt install -y git wget flex bison gperf python3 python3-pip python3-setuptools python3-serial python3-click python3-cryptography python3-future python3-pyparsing python3-pyelftools cmake ninja-build ccache libffi-dev libssl-dev libusb-1.0-0
          cd ./port/esp32
          # git clone --recursive -b release/v5.0 https://github.com/espressif/esp-idf.git
          git clone -b release/v5.0 https://github.com/espressif/esp-idf.git
          ( cd esp-idf && git checkout 335ca8a687d4f507b8ffe8a4ec3132ba4a4a4be3 )
          ( cd esp-idf && git submodule update --init --recursive )
          ./esp-idf/install.sh
          . ./esp-idf/export.sh
          idf.py set-target esp32
          ( cd esp-idf/components/mbedtls/mbedtls && patch -p1 < ../../../../../../patches/01-ocf-x509san-anon-psk.patch)
          ( cd esp-idf/components/mbedtls/mbedtls && patch -p1 < ../../../../patches/mbedtls/02-ocf-mbedtls-config.patch)
          ( cd esp-idf/components/lwip/lwip && find ../../../../patches/lwip/ -type f -name '*.patch' -exec patch -p1 -i {} \; )
          idf.py build
