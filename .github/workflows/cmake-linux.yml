# Build on Linux with CMake and execute tests

name: CI-cmake building linux

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      clang:
        description: "Compile using clang"
        required: false
        type: boolean
        default: false
      install_mbedtls:
        description: "Install mbedTLS and use it for the build"
        required: false
        type: boolean
        default: false

jobs:
  cmake_linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          # default (secure on, pki on, dynamic allocation on, tcp off, oscore on, cloud off, maintenance resource off, software update off, well-known core resource off)
          - args: ""
          # ipv4 on
          - args: "-DOC_IPV4_ENABLED=ON"
          # access in RFOTM on
          - args: "-DOC_RESOURCE_ACCESS_IN_RFOTM_ENABLED=ON"
          # tcp on
          - args: "-DOC_TCP_ENABLED=ON"
          # ipv4 on, tcp on
          - args: "-DOC_IPV4_ENABLED=ON -DOC_TCP_ENABLED=ON"
          # ipv4 on, tcp on, dynamic allocation off
          - args: "-DOC_IPV4_ENABLED=ON -DOC_TCP_ENABLED=ON -DOC_DYNAMIC_ALLOCATION_ENABLED=OFF"
          # ipv4 on, tcp on, pki off
          - args: "-DOC_IPV4_ENABLED=ON -DOC_TCP_ENABLED=ON -DOC_PKI_ENABLED=OFF"
          # cloud on (ipv4+tcp on), collections create on, maintenance resource on
          - args: "-DOC_CLOUD_ENABLED=ON -DOC_COLLECTIONS_IF_CREATE_ENABLED=ON -DOC_MNT_ENABLED=ON"
          # debug on, cloud on (ipv4+tcp on), software update on
          - args: "-DOC_DEBUG_ENABLED=ON -DOC_CLOUD_ENABLED=ON -DOC_SOFTWARE_UPDATE_ENABLED=ON"
          # debug on, well-known core resource on
          - args: "-DOC_DEBUG_ENABLED=ON -DOC_WKCORE_ENABLED=ON"
          # secure off, ipv4 on
          - args: "-DOC_SECURITY_ENABLED=OFF -DOC_IPV4_ENABLED=ON"
          # secure off, tcp on
          - args: "-DOC_SECURITY_ENABLED=OFF -DOC_TCP_ENABLED=ON"
          # secure off, ipv4 on, tcp on
          - args: "-DOC_SECURITY_ENABLED=OFF -DOC_TCP_ENABLED=ON -DOC_IPV4_ENABLED=ON"
          # collection create if on, push notification on, tcp off
          - args: "-DOC_COLLECTIONS_IF_CREATE_ENABLED=ON -DOC_PUSH_ENABLED=ON"
          # everything off (dynamic allocation off, secure off, pki off, idd off, oscore off)
          - args: "-DOC_DYNAMIC_ALLOCATION_ENABLED=OFF -DOC_SECURITY_ENABLED=OFF -DOC_PKI_ENABLED=OFF -DOC_IDD_API_ENABLED=OFF -DOC_OSCORE_ENABLED=OFF"
    uses: ./.github/workflows/unit-test-with-cfg.yml
    with:
      build_args: ${{ matrix.args }}
      build_type: Debug
      clang: ${{ github.event_name == 'workflow_dispatch' && inputs.clang }}
      coverage: false
      install_mbedtls: ${{ github.event_name == 'workflow_dispatch' && inputs.install_mbedtls }}

  cmake_linux_sanitized:
    strategy:
      fail-fast: false
      matrix:
        include:
          # address sanitizer
          - args: -DOC_ASAN_ENABLED=ON
          # leak sanitizer
          - args: -DOC_LSAN_ENABLED=ON
          # thread sanitizer
          - args: -DOC_TSAN_ENABLED=ON
          # undefined behaviour sanitizer
          - args: -DOC_UBSAN_ENABLED=ON
          # TODO: update gtest
          # - args: -DOC_MSAN_ENABLED=ON
    uses: ./.github/workflows/unit-test-with-cfg.yml
    with:
      build_args: -DOC_CLOUD_ENABLED=ON -DOC_COLLECTIONS_IF_CREATE_ENABLED=ON -DOC_MNT_ENABLED=ON -DOC_WKCORE_ENABLED=ON -DOC_SOFTWARE_UPDATE_ENABLED=ON -DOC_PUSH_ENABLED=ON -DOC_RESOURCE_ACCESS_IN_RFOTM_ENABLED=ON ${{ matrix.args }}
      build_type: Debug
      clang: ${{ github.event_name == 'workflow_dispatch' && inputs.clang }}
      coverage: false
      install_mbedtls: ${{ github.event_name == 'workflow_dispatch' && inputs.install_mbedtls }}
