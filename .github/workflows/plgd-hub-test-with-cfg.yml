# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Run plgd/hub tests with cloud_server and a single configuration

on:
  workflow_call:
    inputs:
      args:
        description: arguments forwarded to the cloud-server binary
        type: string
        required: false
        default: ""
      build_args:
        description: build arguments forwarded to CMake in docker/apps/Dockerfile.cloud-server-debug
        type: string
        required: true
      build_type:
        type: string
        required: false
        default: Debug
      cert_signature_algorithm:
        description: Signature algorithm used in generated certificates
        type: string
        required: false
        default: ECDSA-SHA256
      cert_elliptic_curve:
        description: Elliptic curve used to generate keys in certificates
        type: string
        required: false
        default: P256
      coverage:
        description: gather and upload coverage data
        type: boolean
        required: false
        default: false
      docker_args:
        description: arguments forwarded to the docker run command of the cloud_server container
        type: string
        required: false
        default: ""
      docker_file:
        description: Dockerfile used to build the cloud_server container
        type: string
        required: false
        default: docker/apps/Dockerfile.cloud-server-debug
      hub_args:
        description: arguments forwarded to the docker run command of the plgd-dev/hub/test-cloud-server container
        type: string
        required: false
        default: ""
      name:
        description: name of the docker container with running cloud_server
        type: string
        required: true
      skip:
        description: Skip this run of the job
        type: boolean
        required: false
        default: false

env:
  TEST_CLOUD_SERVER_IMAGE: ghcr.io/plgd-dev/hub/test-cloud-server:latest
  CLOUD_SERVER_DOCKER_TAG: dbg

jobs:
  plgd-hub-test-with-cfg:
    if: ${{ !inputs.skip }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "true"

      - name: Build cloud server docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          build-args: |
            BUILD_ARGS=${{ inputs.build_args }}
            BUILD_TYPE=${{ inputs.build_type }}
          file: ${{ inputs.docker_file }}
          tags: ${{ env.CLOUD_SERVER_DOCKER_TAG }}

      - name: Pull plgd hub tests image
        run: docker pull ${{ env.TEST_CLOUD_SERVER_IMAGE }}

      - name: Run cloud server container
        run: |
          docker run --privileged -d --network=host -v `pwd`/data:/tmp -v `pwd`/data/coverage:/data/coverage --name ${{ inputs.name }} \
            ${{ inputs.docker_args }} ${{ env.CLOUD_SERVER_DOCKER_TAG }} ${{ inputs.args }} devsim-`hostname`

      - name: Run plgd hub tests image
        run: docker run --rm --network=host ${{ inputs.hub_args }} ${{ env.TEST_CLOUD_SERVER_IMAGE }}

      - name: Get output file name
        if: ${{ inputs.coverage }}
        id: coverage
        run: |
          SUFFIX=`echo "-DCMAKE_BUILD_TYPE=${{ inputs.build_type }} ${{ inputs.build_args }} ${{ inputs.args }} ${{ inputs.docker_args }} ${{ inputs.hub_args }} ${{ inputs.name }} -DBUILD_TESTING=ON" | sha1sum | cut -f 1 -d ' '`
          echo "filename=coverage-plgd-hub-${SUFFIX}.json" >> $GITHUB_OUTPUT

      - name: Gather coverage data
        if: ${{ inputs.coverage }}
        run: |
          # stop to generate .gcda files
          docker stop --time 60 ${{ inputs.name }}
          # restart to generate report from the .gcda files
          docker start ${{ inputs.name }}
          # see Dockerfile.cloud-server-debug for the absolute path with the iotivity-lite checkout
          docker exec --workdir "/iotivity-lite/tools" ${{ inputs.name }} /bin/bash -c "./collect-coverage.sh --output /data/coverage/${{ steps.coverage.outputs.filename }}"

      - name: Upload coverage data
        if: ${{ inputs.coverage }}
        uses: actions/upload-artifact@v3
        with:
          name: plgd-hub-coverage
          path: data/coverage/${{ steps.coverage.outputs.filename }}
          if-no-files-found: error
          retention-days: 1

      - name: Remove cloud server container
        if: ${{ always() }}
        run: |
          # enough time for sanitized build to generate report on exit
          docker stop --time 300 ${{ inputs.name }} || :
          docker rm -f ${{ inputs.name }} || :

      - name: Collect cloud server logs when the test fails
        if: ${{ failure() }}
        run: cat `pwd`/data/0.log

      - name: Collect sanitizers cloud server logs
        if: ${{ always() }}
        run: |
          if ls `pwd`/data/0.asan.log* 1> /dev/null 2>&1; then \
            sudo cat `pwd`/data/0.asan.log*; \
          fi
          if ls `pwd`/data/0.tsan.log* 1> /dev/null 2>&1; then \
            sudo cat `pwd`/data/0.tsan.log*; \
          fi
