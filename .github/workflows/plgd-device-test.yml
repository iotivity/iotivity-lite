# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Run plgd/device tests with cloud_server

on:
  push:

env:
  TEST_CLOUD_SERVER_IMAGE: ghcr.io/plgd-dev/device/test-cloud-server:latest
  CERT_TOOL_IMAGE: ghcr.io/plgd-dev/hub/cert-tool:vnext
  CERT_PATH: .tmp/pki_certs

jobs:
  plgd-device-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: cloud-server-debug
            file: docker/apps/Dockerfile.cloud-server-debug
            tag: dbg
            args: "CLOUD=1 SECURE=1 CREATE=1 MNT=1 DEBUG=1 OSCORE=0 ASAN=0 TSAN=0"
          - name: cloud-server-debug-asan
            file: docker/apps/Dockerfile.cloud-server-debug
            tag: dbg
            args: "CLOUD=1 SECURE=1 CREATE=1 MNT=1 DEBUG=1 OSCORE=0 ASAN=1 TSAN=0"
          - name: cloud-server-debug-tsan
            file: docker/apps/Dockerfile.cloud-server-debug
            tag: dbg
            args: "CLOUD=1 SECURE=1 CREATE=1 MNT=1 DEBUG=1 OSCORE=0 ASAN=0 TSAN=1"

          - name: cloud-server-discovery-resource-observable-debug
            file: docker/apps/Dockerfile.cloud-server-debug
            tag: dbg
            args: "CLOUD=1 SECURE=1 CREATE=1 MNT=1 DEBUG=1 OICRES_OBSERVABLE=1 OSCORE=0 ASAN=0 TSAN=0"
          - name: cloud-server-discovery-resource-observable-debug-asan
            file: docker/apps/Dockerfile.cloud-server-debug
            tag: dbg
            args: "CLOUD=1 SECURE=1 CREATE=1 MNT=1 DEBUG=1 OICRES_OBSERVABLE=1 OSCORE=0 ASAN=1 TSAN=0"
          - name: cloud-server-discovery-resource-observable-debug-tsan
            file: docker/apps/Dockerfile.cloud-server-debug
            tag: dbg
            args: "CLOUD=1 SECURE=1 CREATE=1 MNT=1 DEBUG=1 OICRES_OBSERVABLE=1 OSCORE=0 ASAN=0 TSAN=1"

          - name: cloud-server-rep-realloc-debug
            file: docker/apps/Dockerfile.cloud-server-debug
            tag: dbg
            args: "CLOUD=1 SECURE=1 CREATE=1 MNT=1 DEBUG=1 REP_ENCODING_REALLOC=1 OSCORE=0 ASAN=0 TSAN=0"
          - name: cloud-server-rep-realloc-debug-asan
            file: docker/apps/Dockerfile.cloud-server-debug
            tag: dbg
            args: "CLOUD=1 SECURE=1 CREATE=1 MNT=1 DEBUG=1 REP_ENCODING_REALLOC=1 OSCORE=0 ASAN=1 TSAN=0"
          - name: cloud-server-rep-realloc-debug-tsan
            file: docker/apps/Dockerfile.cloud-server-debug
            tag: dbg
            args: "CLOUD=1 SECURE=1 CREATE=1 MNT=1 DEBUG=1 REP_ENCODING_REALLOC=1 OSCORE=0 ASAN=0 TSAN=1"

          - name: cloud-server-discovery-resource-observable-rep-realloc-debug
            file: docker/apps/Dockerfile.cloud-server-debug
            tag: dbg
            args: "CLOUD=1 SECURE=1 CREATE=1 MNT=1 DEBUG=1 OICRES_OBSERVABLE=1 REP_ENCODING_REALLOC=1 OSCORE=0 ASAN=0 TSAN=0"
          - name: cloud-server-discovery-resource-observable-rep-realloc-debug-asan
            file: docker/apps/Dockerfile.cloud-server-debug
            tag: dbg
            args: "CLOUD=1 SECURE=1 CREATE=1 MNT=1 DEBUG=1 OICRES_OBSERVABLE=1 REP_ENCODING_REALLOC=1 OSCORE=0 ASAN=1 TSAN=0"
          - name: cloud-server-discovery-resource-observable-rep-realloc-debug-tsan
            file: docker/apps/Dockerfile.cloud-server-debug
            tag: dbg
            args: "CLOUD=1 SECURE=1 CREATE=1 MNT=1 DEBUG=1 OICRES_OBSERVABLE=1 REP_ENCODING_REALLOC=1 OSCORE=0 ASAN=0 TSAN=1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build cloud server docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          file: ${{ matrix.file }}
          tags: ${{ matrix.tag }}
          build-args: |
            BUILD_ARGS=${{ matrix.args }}

      - name: Pull plgd device tests image
        run: docker pull ${{ env.TEST_CLOUD_SERVER_IMAGE }}

      - name: Setup environment
        run: |
          mkdir -p `pwd`/${{ env.CERT_PATH }}
          docker pull ${{ env.CERT_TOOL_IMAGE }}
          docker run --rm -v `pwd`/${{ env.CERT_PATH }}:/out ${{ env.CERT_TOOL_IMAGE }} --outCert=/out/cloudca.pem --outKey=/out/cloudcakey.pem --cert.subject.cn="ca" --cmd.generateRootCA
          docker run --rm -v `pwd`/${{ env.CERT_PATH }}:/out ${{ env.CERT_TOOL_IMAGE }} --signerCert=/out/cloudca.pem --signerKey=/out/cloudcakey.pem  --outCert=/out/intermediatecacrt.pem --outKey=/out/intermediatecakey.pem --cert.basicConstraints.maxPathLen=0 --cert.subject.cn="intermediateCA" --cmd.generateIntermediateCA
          docker run --rm -v `pwd`/${{ env.CERT_PATH }}:/out ${{ env.CERT_TOOL_IMAGE }} --signerCert=/out/intermediatecacrt.pem --signerKey=/out/intermediatecakey.pem --outCert=/out/mfgcrt.pem --outKey=/out/mfgkey.pem --cert.san.domain=localhost --cert.san.ip=127.0.0.1 --cert.subject.cn="mfg" --cmd.generateCertificate
          sudo chmod -R 0777 ${{ env.CERT_PATH }}

      - name: Run cloud server container
        run: docker run --privileged -d --network=host -v `pwd`/${{ env.CERT_PATH }}:/pki_certs -v `pwd`/data:/tmp --name ${{ matrix.name }} ${{ matrix.tag }} devsim-`hostname`

      - name: Run plgd device tests image
        run: docker run --rm --network=host -v `pwd`/${{ env.CERT_PATH }}:/pki_certs ${{ env.TEST_CLOUD_SERVER_IMAGE }} -test.parallel 1 -test.v

      - name: Collect cloud server logs when the test fails
        if: ${{ failure() }}
        run: cat `pwd`/data/0.log

      - name: Collect sanitizers cloud server logs when the test fails
        if: ${{ failure() }}
        run: |
          if ls `pwd`/data/0.asan.log* 1> /dev/null 2>&1; then \
            sudo cat `pwd`/data/0.asan.log*; \
          fi
          if ls `pwd`/data/0.tsan.log* 1> /dev/null 2>&1; then \
            sudo cat `pwd`/data/0.tsan.log*; \
          fi

      - name: Remove cloud server container
        run: docker rm -f ${{ matrix.name }}
